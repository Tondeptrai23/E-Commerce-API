# GET /products
tags:
  - User Products
summary: Get all products
description: Retrieves a list of all products with optional filtering, sorting, and pagination. <br>
  - Filtering by name, category, variant, and attributes. <br>
  - Sorting by one or more fields. <br>
  - Pagination by page and size. <br>
  - Only one variant per product is returned, selected as the first variant matching all filter criteria when sorting variants by specified filters. <br>
  - If `sort` is not provided, the default sort is by `createdAt` in descending order. <br>
parameters:
  - name: page
    in: query
    description: Page to retrieve
    required: false
    schema:
      type: integer

  - name: size
    in: query
    description: Size each page
    required: false
    schema:
      type: integer

  - name: name
    in: query
    description: Filter by name. <br>
      For more information, see [String Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).
    required: false
    schema:
      example: "[like]Product"

  - name: variant
    in: query
    description: Filter by variant's field.
    required: false
    style: deepObject
    explode: false
    schema:
      type: object
      properties:
        price:
          description: Filter by price
            For more information, see [Number Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).
          example: "[lte]100"
        discountPrice:
          description: Filter by discountPrice
            For more information, see [Number Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).
          example: "[gte]30"
        sku:
          description: Filter by sku
            For more information, see [String Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).
          example: "[like]T"
        stock:
          description: Filter by stock
            For more information, see [Number Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).
          example: "[gte]5"

  - name: category
    in: query
    description: Filter by category
    required: false
    schema:
      $ref: "../../../schemas/products/categoryNames.yaml"
  
  - name: sort
    in: query
    description: |
      Sort products by one or more fields.
      Support fields: `name`, `price`, `discountPrice`, `stock`.
      For more information, see [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting).
    required: false
    schema:
      oneOf:
        - type: string
        - type: array

  - name: attributes
    in: query
    description: Filter by variants' attributes. <br>
      For more information, see the [Filter By Variant Attributes](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md##get-products-and-get-adminproducts-1).
    required: false
    style: deepObject
    explode: false
    schema:
      type: object
      description: Dynamic attributes of the product
      properties:
        color:
          example: "red"
        size:
          example: "M,L"
responses:
    200:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              currentPage:
                type: integer
                example: 1
              totalPages:
                type: integer
                example: 10
              totalItems:
                type: integer
                example: 20
              products:
                type: array
                items:
                  type: object
                  properties:
                    variants:
                      type: array
                      items:
                        $ref: "../../../schemas/products/variant.yaml"
                    categories:
                      $ref: "../../../schemas/products/categoryNames.yaml"
                  allOf:
                    - $ref: "../../../schemas/products/product.yaml"

    400:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: "../../../schemas/error/error400.yaml"

    500:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "../../../schemas/error/error500.yaml"
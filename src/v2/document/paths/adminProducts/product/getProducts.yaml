# GET /admin/products
tags:
  - Admin Products
summary: Retrieve all products
description: Retrieves a list of all products with optional filtering, sorting, and pagination. <br>
  Admin-specific filters and sorting options are available, including product ID, creation date, and update date.
security:
  - bearerAuth: []
parameters:
  - name: page
    in: query
    description: Page to retrieve
    required: false
    schema:
      type: integer

  - name: size
    in: query
    description: Size each page
    required: false
    schema:
      type: integer

  - name: productID
    in: query
    description: Filter by productID. <br> 
      - Support partial matching using "[like]productID"
    required: false
    schema:
      type: string

  - name: name
    in: query
    description: Filter by name. <br> 
      - Support partial matching using "[like]name"
    required: false
    schema:
      type: string

  - name: createdAt
    in: query
    description: Filter by createdAt. <br> 
      - Support operators <br> 
      + [lte]2024-01-01 <br> 
      + [gte]2024-01-01 <br> 
      + [between]2024-01-01,2022-01-01 <br> 
    required: false
    schema:
      type: string

  - name: updatedAt
    in: query
    description: Filter by updatedAt. <br> 
      - Support operators <br> 
      + [lte]2024-01-01 <br> 
      + [gte]2024-01-01 <br> 
      + [between]2024-01-01,2022-01-01 <br> 
    required: false
    schema:
      type: string

  - name: variant
    in: query
    style: deepObject
    explode: true
    description: Filter by variant's price and discountPrice. <br> 
        - Support operators "[lte]100", "[gte]100", "[between]100,200"
    required: false
    schema:
      type: object
      properties:
        price:
          pattern: /^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/
          example: "[gte]100"
        discountPrice:
          pattern: /^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/
          example: 90.0
        sku:
          type: string
        stock:
          type: integer
          example: 10

  - name: category
    in: query
    description: Filter by category
    required: false
    schema:
      $ref: "../../../schemas/products/categoryNames.yaml"
  
  - name: sort
    in: query
    description: Sort products by one or more fields. <br> 
      Specify fields in a comma-separated string ("price,-discountPrice"), as a single string ("price"), or as an array of strings (["price", "-discountPrice"]). <br>
      A leading '-' indicates descending order. Sorting is applied from left to right.
    required: false
    schema:
      oneOf:
        - type: string
        - type: array

  - name: oneVariant
    in: query
    description: Return only one variant of each product
    required: false
    schema:
      type: boolean
      example: true

  - name: attributes
    in: query
    description: Filter products by attributes. <br>
      The `attributes` parameter is a dynamic object where keys represent attribute names and values represent desired attribute values.  <br>
      A product is included in the results if at least one of its variants matches all specified attributes.  <br>
      For example, `attributes={"color":"red","size":"M"}` will return products with a variant having both the color "red" and size "M".  <br>
      Note that `size="M,L"` is different from `size=["M","L"]`. <br>
        - The former filters for products with either size M or L, while the latter filters for products with both sizes (which is typically impossible).
    required: false
    style: deepObject
    schema:
      type: object
      description: Dynamic attributes of the product
      properties:
        color:
          example: "red"
        size:
          example: "M,L"

responses:
  200:
    description: Successful operation
    content:
      application/json:
        schema:
          type: object
          allOf:
            - $ref: "../../../schemas/pagination.yaml"
          properties:
            success:
              type: boolean
              example: true
            products:
              type: array
              items:
                type: object
                properties:
                  variants:
                    type: array
                    items:
                      allOf:
                        - $ref: "../../../schemas/products/variant.yaml"
                        - $ref: "../../../schemas/timestamps.yaml"
                  categories:
                    $ref: "../../../schemas/products/categoryNames.yaml"
                allOf:
                  - $ref: "../../../schemas/products/product.yaml"
                  - $ref: "../../../schemas/timestamps.yaml"

  400:
    description: Invalid query parameters
    content:
      application/json:
        schema:
          $ref: "../../../schemas/error/error400.yaml"

  401:
    description: Token error, not authenticated
    content:
      application/json:
        schema:
          $ref: "../../../schemas/error/error401.yaml"

  403:
    description: Not an admin
    content:
      application/json:
        schema:
          $ref: "../../../schemas/error/error403.yaml"  

  500:
    description: Internal Server Error
    content:
      application/json:
        schema:
          $ref: "../../../schemas/error/error500.yaml" 
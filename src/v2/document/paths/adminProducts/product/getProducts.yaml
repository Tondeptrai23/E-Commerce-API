# GET /admin/products
tags:
  - Admin Products
summary: Get all products
description: Retrieves a list of all products with optional filtering, sorting, and pagination. <br>
  - The same as the user's endpoint but with sorting/filtering by createdAt and updatedAt. 
security:
  - bearerAuth: []
parameters:
  - name: page
    in: query
    description: Page to retrieve
    required: false
    schema:
      type: integer

  - name: size
    in: query
    description: Size each page
    required: false
    schema:
      type: integer

  - name: name
    in: query
    description: Filter by name. <br> 
      - Support partial matching using "[like]name"
    required: false
    schema:
      type: string

  - name: createdAt
    in: query
    description: Filter by createdAt. <br> 
      - Support operators "[lte]2021-01-01", "[gte]2021-01-01", "[between]2021-01-01,2022-01-01"
    required: false
    schema:
      type: string

  - name: updatedAt
    in: query
    description: Filter by updatedAt. <br> 
      - Support operators "[lte]2021-01-01", "[gte]2021-01-01", "[between]2021-01-01,2022-01-01"
    required: false
    schema:
      type: string

  - name: variant
    in: query
    style: deepObject
    explode: true
    description: Filter by variant's price and discountPrice. <br> 
        - Support operators "[lte]100", "[gte]100", "[between]100,200"
    required: false
    schema:
      type: object
      properties:
        price:
          pattern: /^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/
          example: "[gte]100"
        discountPrice:
          pattern: /^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/
          example: 90.0
        sku:
          type: string
        stock:
          type: integer
          example: 10

  - name: category
    in: query
    description: Filter by category
    required: false
    schema:
      $ref: "../../../schemas/products/categoryNames.yaml"
  
  - name: sort
    in: query
    description: Sort products by one or more fields. <br> 
      - A comma-separated list of fields ("price,-discountPrice"). <br>
      - A single field ("price"). <br> 
      - An array of fields (["price", "-discountPrice"]). <br> 
      - A leading '-' indicates descending order. <br>
      - Sorting is applied from left to right
    required: false
    schema:
      oneOf:
        - type: string
        - type: array

  - name: oneVariant
    in: query
    description: Return only one variant of each product
    required: false
    schema:
      type: boolean
      example: true

  - name: attributes
    in: query
    description: Filter by attributes
    required: false
    style: deepObject
    schema:
      type: object
      description: Dynamic attributes of the product
      properties:
        color:
          example: "red"
        size:
          example: "M,L"

responses:
  200:
    description: Successful operation
    content:
      application/json:
        schema:
          type: object
          properties:
            success:
              type: boolean
              example: true
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 10
            totalItems:
              type: integer
              example: 20
            products:
              type: array
              items:
                type: object
                properties:
                  variants:
                    type: array
                    items:
                      allOf:
                        - $ref: "../../../schemas/products/variantForAdmin.yaml"
                        - $ref: "../../../schemas/timestamps.yaml"
                  categories:
                    $ref: "../../../schemas/products/categoryNames.yaml"
                allOf:
                  - $ref: "../../../schemas/products/product.yaml"
                  - $ref: "../../../schemas/timestamps.yaml"

  400:
    description: Invalid query parameters
    content:
      application/json:
        schema:
          $ref: "../../../schemas/error/error400.yaml"

  401:
    description: Token error, not authenticated
    content:
      application/json:
        schema:
          $ref: "../../../schemas/error/error401.yaml"

  403:
    description: Not an admin
    content:
      application/json:
        schema:
          $ref: "../../../schemas/error/error403.yaml"  

  500:
    description: Internal Server Error
    content:
      application/json:
        schema:
          $ref: "../../../schemas/error/error500.yaml" 
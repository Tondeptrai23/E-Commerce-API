openapi: 3.0.0
info:
  title: E-commerce API
  description: This API provides endpoints for managing products in an E-commerce system.
  version: 2.0.0
servers:
  - url: 'https://localhost:3000/api/v2'
tags:
  - name: Authentication
    description: This field represents the description of something.
  - name: User Products
    description: This field represents the description of something.
  - name: User Categories
    description: This field represents the description of something.
  - name: Admin Products
    description: This field represents the description of something.
  - name: Admin Categories
    description: This field represents the description of something.
  - name: Admin Coupons
    description: This field represents the description of something.
  - name: Admin Attributes
    description: This field represents the description of something.
paths:
  /auth/signin:
    post:
      tags:
        - Authentication
      summary: Sign in
      description: Sign in with the given credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: Sign in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      userID:
                        type: string
                        example: '1'
                      email:
                        type: string
                        example: example@gmail.com
                      name:
                        type: string
                        example: John Doe
                        nullable: true
                      role:
                        type: string
                        example: user
                      avatar:
                        type: string
                        example: 'https://example.com/avatar.jpg'
                        nullable: true
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Email or password incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: ConflictError
                        message:
                          type: string
                          example: Something already exists
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Sign up
      description: Sign up with the given credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
                password:
                  type: string
                  example: password
      responses:
        '201':
          description: Sign up successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signin/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /auth/refreshToken:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Refresh the access token with the given refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: refreshToken
      responses:
        '200':
          description: Refresh token successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /auth/refreshToken/reset:
    post:
      tags:
        - Authentication
      summary: Reset refresh token
      description: Reset the refresh token with the given refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: refreshToken
      responses:
        '200':
          description: Reset refresh token successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /products:
    get:
      tags:
        - User Products
      summary: Get all products
      description: 'Retrieves a list of all products with optional filtering, sorting, and pagination. <br> - Filtering by name, category, variant, and attributes. <br> - Sorting by one or more fields. <br> - Pagination by page and size. <br>'
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: name
          in: query
          description: 'Filter by name. Support partial matching using "[like]name"'
          required: false
          schema:
            type: string
            pattern: '/^(\[like\])?([\w-]+)$/'
        - name: variant
          in: query
          description: 'Filter by variant''s price and discountPrice. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          style: deepObject
          explode: false
          schema:
            type: object
            properties:
              price:
                pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
                example: '[gte]100'
              discountPrice:
                pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
                example: 90
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            $ref: '#/components/schemas/categoryNames'
        - name: sort
          in: query
          description: 'Sort products by one or more fields. <br> - A comma-separated list of fields ("price,-discountPrice"). <br> - A single field ("price"). <br> - An array of fields (["price", "-discountPrice"]). <br> A leading ''-'' indicates descending order. <br> Sorting is applied from left to right'
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
        - name: oneVariant
          in: query
          description: Return only one variant of each product. Default is false
          required: false
          schema:
            type: boolean
            example: true
        - name: attributes
          in: query
          description: 'Filter by attributes. <br> - Only support exact matching. <br> - Support multiple attributes. <br> - For example, to find products that have red variant and size M or L, use "color=red&size=M,L" or "color=red&size=M&size=L". <br>'
          required: false
          style: deepObject
          explode: false
          schema:
            type: object
            description: Dynamic attributes of the product
            properties:
              color:
                example: red
              size:
                example: 'M,L'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
                  totalItems:
                    type: integer
                    example: 20
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        variants:
                          type: array
                          items:
                            $ref: '#/components/schemas/variantForUser'
                        categories:
                          $ref: '#/components/schemas/categoryNames'
                      allOf:
                        - $ref: '#/components/schemas/product'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}':
    get:
      tags:
        - User Products
      summary: Get a product by ID
      description: Retrieves a product by its ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      variants:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/variantForUser'
                            - $ref: '#/components/schemas/variantAttribute'
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                      images:
                        type: array
                        items:
                          $ref: '#/components/schemas/image'
                    allOf:
                      - $ref: '#/components/schemas/product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}/variants':
    get:
      tags:
        - User Products
      summary: Get product variants
      description: Returns all variants of a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get variants
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Variants found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variants:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/variantForUser'
                      properties:
                        attributes:
                          $ref: '#/components/schemas/variantAttribute'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}/images':
    get:
      tags:
        - User Products
      summary: Get product images
      description: Returns all images of a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get images
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Images found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: true
                    example: true
                  images:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/image'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}/categories':
    get:
      tags:
        - User Products
      summary: Get product categories
      description: Returns all categories of a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get categories
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Categories found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/category'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /categories:
    get:
      tags:
        - User Categories
      summary: Get all categories
      description: |
        Get all categories.
      responses:
        '200':
          description: Categories found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/categories/{categoryName}':
    get:
      tags:
        - User Categories
      summary: Get a category
      description: |
        Get a category by name.
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  category:
                    type: array
                    items:
                      type: object
                      properties:
                        parent:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/category'
                      allOf:
                        - $ref: '#/components/schemas/category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/categories/{categoryName}/ascendants':
    get:
      tags:
        - User Categories
      summary: Get all ascendant categories of a category
      description: |
        Get all ascendant categories of a category by name. Includes the category itself.
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/categories/{categoryName}/descendants':
    get:
      tags:
        - User Categories
      summary: Get all descendant categories of a category
      description: |
        Get all descendant categories of a category by name. Includes the category itself.
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/products:
    get:
      tags:
        - Admin Products
      summary: Get all products
      description: 'Retrieves a list of all products with optional filtering, sorting, and pagination. <br> - The same as the user''s endpoint but with sorting/filtering by productID, createdAt and updatedAt.'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: productID
          in: query
          description: 'Filter by productID. <br> - Support partial matching using "[like]productID"'
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: 'Filter by name. <br> - Support partial matching using "[like]name"'
          required: false
          schema:
            type: string
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> - Support operators <br> + [lte]2024-01-01 <br> + [gte]2024-01-01 <br> + [between]2024-01-01,2022-01-01 <br>'
          required: false
          schema:
            type: string
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> - Support operators <br> + [lte]2024-01-01 <br> + [gte]2024-01-01 <br> + [between]2024-01-01,2022-01-01 <br>'
          required: false
          schema:
            type: string
        - name: variant
          in: query
          style: deepObject
          explode: true
          description: 'Filter by variant''s price and discountPrice. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          schema:
            type: object
            properties:
              price:
                pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
                example: '[gte]100'
              discountPrice:
                pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
                example: 90
              sku:
                type: string
              stock:
                type: integer
                example: 10
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            $ref: '#/components/schemas/categoryNames'
        - name: sort
          in: query
          description: 'Sort products by one or more fields. <br> - A comma-separated list of fields ("price,-discountPrice"). <br> - A single field ("price"). <br> - An array of fields (["price", "-discountPrice"]). <br> - A leading ''-'' indicates descending order. <br> - Sorting is applied from left to right'
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
        - name: oneVariant
          in: query
          description: Return only one variant of each product
          required: false
          schema:
            type: boolean
            example: true
        - name: attributes
          in: query
          description: Filter by attributes
          required: false
          style: deepObject
          schema:
            type: object
            description: Dynamic attributes of the product
            properties:
              color:
                example: red
              size:
                example: 'M,L'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        variants:
                          type: array
                          items:
                            allOf:
                              - $ref: '#/components/schemas/variantForAdmin'
                              - $ref: '#/components/schemas/timestamps'
                        categories:
                          $ref: '#/components/schemas/categoryNames'
                      allOf:
                        - $ref: '#/components/schemas/product'
                        - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Products
      summary: Create a new product
      description: Creates a new product with the given data.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: T-Shirt
                description:
                  type: string
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      price:
                        type: number
                        example: 100
                      discountPrice:
                        type: number
                        example: 90
                        nullable: true
                      stock:
                        type: integer
                        example: 10
                      sku:
                        type: string
                    allOf:
                      - $ref: '#/components/schemas/variantForAdmin'
                categories:
                  $ref: '#/components/schemas/categoryNames'
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                        example: 'https://example.com/image.jpg'
                      thumbnail:
                        type: string
                        example: 'https://example.com/image-thumbnail.jpg'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: true
                  product:
                    type: object
                    properties:
                      variants:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/variantForAdmin'
                            - $ref: '#/components/schemas/variantAttribute'
                            - $ref: '#/components/schemas/timestamps'
                      images:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/image'
                            - $ref: '#/components/schemas/timestamps'
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}':
    get:
      tags:
        - Admin Products
      summary: Get a product
      security:
        - bearerAuth: []
      description: Returns a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      variants:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/variantForAdmin'
                            - $ref: '#/components/schemas/timestamps'
                          properties:
                            attributes:
                              $ref: '#/components/schemas/variantAttribute'
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Products
      summary: Update a product
      description: Updates a product with the given data.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to update
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Product Name
                  nullable: true
                description:
                  type: string
                  example: Product Description
                  nullable: true
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      productID:
                        type: string
                        example: '1'
                      name:
                        type: string
                        example: Product Name
                      description:
                        type: string
                        example: Product Description
                    allOf:
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Products
      summary: Delete a product
      description: Deletes a product with the given ID.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to delete
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/variants':
    get:
      tags:
        - Admin Products
      summary: Get all variants of a product
      description: Returns all variants of a product.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to get variants of
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Variants found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variants:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/variantForAdmin'
                        - $ref: '#/components/schemas/timestamps'
                        - $ref: '#/components/schemas/variantAttribute'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Products
      summary: Create new variants for a product
      description: Create multiple variants for a product with the given ID.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to create variants for
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      price:
                        type: number
                        example: 100
                      discountPrice:
                        type: number
                        example: 90
                        nullable: true
                      stock:
                        type: integer
                        example: 10
                      sku:
                        type: string
                      attributes:
                        type: array
                        items:
                          $ref: '#/components/schemas/variantAttribute'
      responses:
        '201':
          description: Variant created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variant:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/variantForAdmin'
                      - $ref: '#/components/schemas/timestamps'
                      - $ref: '#/components/schemas/variantAttribute'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/variants/{variantID}':
    get:
      tags:
        - Admin Products
      summary: Get a variant of a product
      description: Returns a variant of a product.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to get a variant of
          required: true
          schema:
            type: string
            example: '1'
        - name: variantID
          in: path
          description: ID of the variant to get
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Variant found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: true
                  variants:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/variantForAdmin'
                      - $ref: '#/components/schemas/timestamps'
                      - $ref: '#/components/schemas/variantAttribute'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Products
      summary: Update a variant
      description: Updates given fields of a variant with given data.
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          description: ID of the product to update a variant of
          required: true
          schema:
            type: string
            example: '1'
        - name: variantId
          in: path
          description: ID of the variant to update
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  example: 100
                  nullable: true
                discountPrice:
                  type: number
                  example: 90
                  nullable: true
                stock:
                  type: integer
                  example: 10
                  nullable: true
                sku:
                  type: string
                  nullable: true
                attributes:
                  type: array
                  nullable: true
                  items:
                    $ref: '#/components/schemas/variantAttribute'
      responses:
        '200':
          description: Variant updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variant:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/variantForAdmin'
                      - $ref: '#/components/schemas/timestamps'
                      - $ref: '#/components/schemas/variantAttribute'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    put:
      tags:
        - Admin Products
      summary: Update a variant
      description: Updates a variant with the given data.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to update a variant of
          required: true
          schema:
            type: string
            example: '1'
        - name: variantID
          in: path
          description: ID of the variant to update
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  example: 100
                discountPrice:
                  type: number
                  example: 90
                  nullable: true
                stock:
                  type: integer
                  example: 10
                sku:
                  type: string
                attributes:
                  type: array
                  nullable: true
                  items:
                    $ref: '#/components/schemas/variantAttribute'
      responses:
        '200':
          description: Variant updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variant:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/variantForAdmin'
                      - $ref: '#/components/schemas/timestamps'
                      - $ref: '#/components/schemas/variantAttribute'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Products
      summary: Delete a variant
      description: Deletes a variant with the given ID.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to delete a variant of
          required: true
          schema:
            type: string
            example: '1'
        - name: variantID
          in: path
          description: ID of the variant to delete
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Variant deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: true
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/images':
    get:
      tags:
        - Admin Products
      summary: Get images of a product
      description: Returns all images of a product with the given ID.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to get images
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Images found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  images:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/image'
                        - $ref: '#/components/schemas/timestamps'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Products
      summary: Add images to a product
      description: Add images to a product. The images will be added to the end of the list.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to add images to
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        description: Image data to add
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                        example: 'https://example.com/image.jpg'
                      thumbnail:
                        type: string
                        example: 'https://example.com/image-thumbnail.jpg'
      responses:
        '200':
          description: Images added
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  images:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/image'
                        - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Products
      summary: Reorder images of a product
      description: Reorder images of a product. The order of the images will be updated according to the given data. <br> The data should be an array of all images in the order they should be displayed. All images not included in the array will be appended to the end of the list.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to reorder images of
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        description: Image data to reorder
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                  example:
                    - '1'
                    - '2'
                    - '3'
      responses:
        '200':
          description: Images reordered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  images:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/image'
                        - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/images/{imageID}':
    patch:
      tags:
        - Admin Products
      summary: Update an image of a product
      description: Updates an image of a product with the given data.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to update an image of
          required: true
          schema:
            type: string
            example: '1'
        - name: imageID
          in: path
          description: ID of the image to update
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        description: Image data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: 'https://example.com/image.jpg'
                thumbnail:
                  type: string
                  example: 'https://example.com/image-thumbnail.jpg'
      responses:
        '200':
          description: Image updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  image:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/image'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Products
      summary: Delete an image from a product
      description: Delete an image from a product
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to delete an image from
          required: true
          schema:
            type: string
            example: '1'
        - name: imageID
          in: path
          description: ID of the image to delete
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Image deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/categories':
    get:
      tags:
        - Admin Products
      summary: Get all categories of a product
      description: Get all categories of a product
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to get categories of
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Categories found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/category'
                        - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Products
      summary: Add categories to a product
      description: Add categories to a product (category must exist)
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to add a category to
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        description: Categories to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categoryNames'
      responses:
        '200':
          description: Category added
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    put:
      tags:
        - Admin Products
      summary: Update categories of a product
      description: Update categories of a product. Old categories will be removed and new categories will be added.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to update categories of
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        description: Categories to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/categoryNames'
      responses:
        '200':
          description: Categories updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/categories/{categoryName}':
    delete:
      tags:
        - Admin Products
      summary: Delete a category from a product
      description: Delete a category from a product
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to delete a category from
          required: true
          schema:
            type: string
            example: '1'
        - name: categoryName
          in: path
          description: Name of the category to delete
          required: true
          schema:
            type: string
            example: shirts
      responses:
        '200':
          description: Category deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/categories:
    get:
      tags:
        - Admin Categories
      summary: Get all categories
      description: |
        Get all categories. <br>
        - Support pagination by page and size. <br>
        - Support partial matching filtering by name, parentID, parentName. <br>
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: name
          in: query
          description: 'Filter by name. <br> - Support partial matching using "[like]name"'
          required: false
          schema:
            type: string
            pattern: '/^(\[like\])?([\w-]+)$/'
        - name: parentID
          in: query
          description: Filter by parentID
          required: false
          schema:
            type: string
        - name: parentName
          in: query
          description: 'Filter by parentName. <br> - Support partial matching using "[like]parentName"'
          required: false
          schema:
            type: string
            pattern: '/^(\[like\])?([\w-]+)$/'
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> - Support operators <br> + [lte]2024-01-01 <br> + [gte]2024-01-01 <br> + [between]2024-01-01,2022-01-01 <br>'
          required: false
          schema:
            type: string
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> - Support operators <br> + [lte]2024-01-01 <br> + [gte]2024-01-01 <br> + [between]2024-01-01,2022-01-01 <br>'
          schema:
            type: string
        - name: sort
          in: query
          description: 'Sort categories by one or more fields. <br> - A comma-separated list of fields ("name,-createdAt"). <br> - A single field ("name"). <br> - An array of fields (["name", "-createdAt"]). <br> - A leading ''-'' indicates descending order. <br> - Sorting is applied from left to right'
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
      responses:
        '200':
          description: Categories found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/category'
                        - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Categories
      summary: Create a category
      description: |
        Create a category by name. The name must be unique.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Category
                description:
                  type: string
                  example: Category description
                  nullable: true
                parent:
                  type: string
                  description: The name or id of the parent category (both are accepted)
                  example: Parent category
                  nullable: true
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  category:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/category'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '409':
          description: Category already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signin/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/categories/{categoryName}':
    get:
      tags:
        - Admin Categories
      summary: Get a category
      description: |
        Get a category by name.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  category:
                    type: object
                    properties:
                      parent:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/category'
                          - $ref: '#/components/schemas/timestamps'
                    allOf:
                      - $ref: '#/components/schemas/category'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    put:
      tags:
        - Admin Categories
      summary: Update a category
      description: |
        Update a category by name. The updated name must be unique.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Category
                description:
                  type: string
                  example: Category description
                  nullable: true
                parent:
                  type: string
                  description: The name or id of the parent category (both are accepted)
                  example: Parent category
                  nullable: true
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  category:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/category'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Category already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signin/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Categories
      summary: Delete a category
      description: |
        Delete a category by name.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/coupons:
    get:
      tags:
        - Admin Coupons
      summary: Get all coupons
      description: |
        Retrieve a list of all coupons with optional filtering, sorting, and pagination. <br>
        If product and category fields are both provided, the filtered coupons will be those that satisfy either product or category. <br>
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: code
          in: query
          description: 'Filter by code. <br> - Support partial matching using "[like]code"'
          required: false
          schema:
            type: string
            example: '[like]10OFF'
        - name: discountValue
          in: query
          description: 'Filter by discountValue. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          schema:
            type: string
            pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
            example: '[gte]100'
        - name: discountType
          in: query
          description: Filter by discountType.
          required: false
          schema:
            type: string
            enum:
              - percentage
              - fixed
            example: percentage
        - name: target
          in: query
          description: Filter by target.
          required: false
          schema:
            type: string
            enum:
              - single
              - all
            example: all
        - name: minimumOrderAmount
          in: query
          description: 'Filter by minimumOrderAmount. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          schema:
            type: string
            pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
            example: '[gte]100'
        - name: timesUsed
          in: query
          description: 'Filter by timesUsed. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          schema:
            type: string
            pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
            example: '[gte]100'
        - name: maxUsage
          in: query
          description: 'Filter by maxUsage. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          schema:
            type: string
            pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
            example: '[gte]100'
        - name: startDate
          in: query
          description: 'Filter by startDate. <br> - Support operators <br> + [lte]2024-01-01 <br> + [gte]2024-01-01 <br> + [between]2024-01-01,2022-01-01 <br>'
          required: false
          schema:
            type: string
        - name: endDate
          in: query
          description: 'Filter by endDate. <br> - Support operators <br> + [lte]2024-01-01 <br> + [gte]2024-01-01 <br> + [between]2024-01-01,2022-01-01 <br>'
          schema:
            type: string
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> - Support operators <br> + [lte]2024-01-01 <br> + [gte]2024-01-01 <br> + [between]2024-01-01,2022-01-01 <br>'
          schema:
            type: string
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> - Support operators <br> + [lte]2024-01-01 <br> + [gte]2024-01-01 <br> + [between]2024-01-01,2022-01-01 <br>'
          required: false
          schema:
            type: string
        - name: product
          in: query
          style: deepObject
          description: 'Filter by product''s productID, name, createdAt, updatedAt. <br>'
          required: false
          schema:
            type: object
            properties:
              productID:
                type: string
                example: '1'
              name:
                type: string
                example: '[like]name'
              createdAt:
                type: string
                example: '[lte]2024-01-01'
              updatedAt:
                type: string
                example: '[lte]2024-01-01'
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            $ref: '#/components/schemas/categoryNames'
        - name: sort
          in: query
          description: Sort by fields. <br> - Support multiple fields separated by comma <br> - Support descending order using "-" prefix <br> - Don't support sorting by nested fields
          required: false
          schema:
            type: string
            example: 'code,-discountValue'
      responses:
        '200':
          description: Coupons retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupons:
                    type: array
                    items:
                      type: object
                      properties:
                        products:
                          type: array
                          items:
                            type: object
                            properties:
                              productID:
                                type: string
                                example: '1'
                              name:
                                type: string
                                example: Product 1
                        categories:
                          $ref: '#/components/schemas/categoryNames'
                      allOf:
                        - $ref: '#/components/schemas/coupon'
                        - $ref: '#/components/schemas/timestamps'
                allOf:
                  - $ref: '#/components/schemas/pagination'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Coupons
      summary: Create a coupon
      description: Create a coupon with the given data. <br> - The coupon code must be unique. <br>
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: 10OFF
                  required: true
                discountValue:
                  type: number
                  example: 10
                  required: true
                discountType:
                  type: string
                  enum:
                    - percentage
                    - fixed
                  example: percentage
                  required: true
                minimumOrderAmount:
                  type: number
                  example: 100
                maxUsage:
                  type: number
                  example: 100
                target:
                  type: string
                  enum:
                    - single
                    - all
                  example: all
                  required: true
                endDate:
                  type: string
                  format: date-time
                  example: '2022-01-01T00:00:00Z'
                productIDs:
                  type: array
                  description: Product IDs that the coupon applies to
                  items:
                    type: string
                  example:
                    - '1'
                    - '2'
                categories:
                  type: array
                  description: Category names that the coupon applies to
                  items:
                    type: string
                  example:
                    - '1'
                    - '2'
      responses:
        '201':
          description: Coupon created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productID:
                              type: string
                              example: '1'
                            name:
                              type: string
                              example: Product 1
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '409':
          description: Coupon code already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signin/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/coupons/{couponID}':
    get:
      tags:
        - Admin Coupons
      summary: Get a coupon by couponID
      description: Retrieve a coupon by couponID.
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Coupon found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productID:
                              type: string
                              example: '1'
                            name:
                              type: string
                              example: Product 1
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Coupon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Coupons
      summary: Update a coupon by couponID
      description: Update a coupon by couponID. Only the provided fields will be updated.
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                discountValue:
                  type: number
                  example: 10
                discountType:
                  type: string
                  enum:
                    - percentage
                    - fixed
                  example: percentage
                minimumOrderAmount:
                  type: number
                  example: 100
                target:
                  type: string
                  enum:
                    - single
                    - all
                  example: all
                endDate:
                  type: string
                  format: date-time
                  example: '2022-01-01T00:00:00Z'
      responses:
        '200':
          description: Coupon updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Coupon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Coupons
      summary: Delete a coupon by ID
      description: Delete a coupon by couponID.
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Coupon deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Coupon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/coupons/{couponID}/categories':
    post:
      tags:
        - Admin Coupons
      summary: Add categories to a coupon
      description: Add categories to a coupon by couponID (by categories' name).
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  $ref: '#/components/schemas/categoryNames'
      responses:
        '200':
          description: Categories added to coupon
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    properties:
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/coupons/{couponID}/products':
    post:
      tags:
        - Admin Coupons
      summary: Add products to a coupon by couponID
      description: Add products to a coupon by couponID.
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                productIDs:
                  type: array
                  items:
                    type: string
                  example:
                    - '1'
                    - '2'
      responses:
        '200':
          description: Products added to coupon
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productID:
                              type: string
                              example: '1'
                            name:
                              type: string
                              example: Product 1
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Coupon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/attributes:
    get:
      tags:
        - Admin Attributes
      summary: Get all attributes
      description: |
        Get all attributes and their values. 
        Support pagination, filtering and sorting.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: name
          in: query
          description: 'Filter by name. <br> - Support partial matching using "[like]name"'
          required: false
          schema:
            type: string
            example: '[like]color'
        - name: values
          in: query
          description: 'Filter by values. <br> - Support partial matching using "[like]value" - Support multiple values using comma "," <br> - Attributes with any of the values will be included'
          required: false
          schema:
            type: string
            example: '[like]red,[like]M'
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> - Support operators ([lte], [gte], [between]) <br>'
          required: false
          schema:
            type: string
            example: '[gte]2022-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> - Support operators ([lte], [gte], [between]) <br>'
          required: false
          schema:
            type: string
            example: '[gte]2022-01-01'
        - name: sort
          in: query
          description: 'Sort by attributeID, name, or type. <br> - Support multiple sorting using comma ",". <br> - Support descending order using "-" prefix <br> - Dont support sorting by nested fields'
          required: false
          schema:
            type: string
            example: 'attributeID,-createdAt'
      responses:
        '200':
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        values:
                          type: array
                          items:
                            type: string
                          example:
                            - red
                            - blue
                      allOf:
                        - $ref: '#/components/schemas/attribute'
                        - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Attributes
      summary: Create an attribute
      description: |
        Create a new attribute with values. 
        The attribute name must be unique. 
        The values must be unique within the attribute. 
        The values can be empty.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: true
              type: object
              properties:
                name:
                  type: string
                  example: color
                  required: true
                values:
                  type: array
                  items:
                    type: string
                  example:
                    - red
                    - blue
      responses:
        '201':
          description: Attribute created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  attribute:
                    type: object
                    properties:
                      values:
                        type: array
                        items:
                          type: string
                        example:
                          - red
                          - blue
                    allOf:
                      - $ref: '#/components/schemas/attribute'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '409':
          description: Attribute name already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signin/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/attributes/{attributeID}':
    get:
      tags:
        - Admin Attributes
      summary: Get attribute by ID
      description: |
        Get attribute by ID. 
        Support pagination, filtering and sorting.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  attribute:
                    type: object
                    properties:
                      attributeID:
                        type: string
                        example: '1'
                      name:
                        type: string
                        example: color
                      values:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/value'
                            - $ref: '#/components/schemas/timestamps'
                    allOf:
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Attributes
      summary: Rename an attribute
      description: |
        Rename an attribute by ID.
        The attribute name must be unique. 
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: true
              type: object
              properties:
                name:
                  type: string
                  example: color
      responses:
        '200':
          description: Attribute updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  attribute:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/attribute'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    put:
      tags:
        - Admin Attributes
      summary: Update an attribute
      description: |
        Update an attribute by ID. Replace existing values with new values. 
        The attribute name must be unique. 
        The values must be unique within the attribute. 
        The values can be empty.
        (If only want to rename the attribute, use PATCH /admin/attributes/{attributeID})
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: true
              type: object
              properties:
                name:
                  type: string
                  example: color
                values:
                  type: array
                  items:
                    type: string
                  example:
                    - red
                    - blue
      responses:
        '200':
          description: Attribute updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  attribute:
                    type: object
                    properties:
                      values:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/value'
                            - $ref: '#/components/schemas/timestamps'
                    allOf:
                      - $ref: '#/components/schemas/attribute'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Attributes
      summary: Add values to an attribute
      description: |
        Add values to an attribute. 
        The values must be unique within the attribute. 
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: true
              type: object
              properties:
                values:
                  type: array
                  items:
                    type: string
                  example:
                    - red
                    - blue
      responses:
        '200':
          description: Values added to attribute
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  values:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/value'
                        - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Attribute value already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signin/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Attributes
      summary: Delete an attribute
      description: |
        Delete an attribute by ID. 
        The attribute must not be used by any product.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Attribute deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/attributes/{attributeID}/values/{valueID}':
    put:
      tags:
        - Admin Attributes
      summary: Update an attribute value
      description: |
        Replace an attribute value by the new value.
        The value must be unique within the attribute. 
        The value can be empty.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
        - name: valueID
          in: path
          description: Value ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: true
              type: object
              properties:
                value:
                  type: string
                  example: red
      responses:
        '200':
          description: Value updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  value:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/value'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute or value not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Value already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signin/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Attributes
      summary: Delete an attribute value
      description: |
        Delete an attribute value by ID. 
        The value must not be used by any product.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
        - name: valueID
          in: path
          description: Value ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Attribute value deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Value Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/attributes/{attributeID}/variants':
    get:
      tags:
        - Admin Attributes
      summary: Get variants which have the attribute
      description: |
        Get variants which have the attributeID. 
        Support pagination, sorting and filtering.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: price
          in: query
          description: 'Filter by variants'' price. <br> - Support operators ([lte], [gte], [between]) <br>'
          required: false
          schema:
            type: string
            example: '[gte]100'
        - name: stock
          in: query
          description: 'Filter by variants'' stock. <br> - Support operators ([lte], [gte], [between]) <br>'
          required: false
          schema:
            type: string
            example: '[lte]100'
        - name: createdAt
          in: query
          description: 'Filter by variants'' created time. <br> - Support operators ([lte], [gte], [between]) <br>'
          required: false
          schema:
            type: string
            example: '[gte]2022-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by variants'' updated time. <br> - Support operators ([lte], [gte], [between]) <br>'
          required: false
          schema:
            type: string
            example: '[gte]2022-01-01'
        - name: sort
          in: query
          description: 'Sort by attribute. <br> - Support multiple sort using comma "," <br> - Support descending order using "-" prefix <br>'
          required: false
          schema:
            type: string
            example: 'price,-createdAt'
      responses:
        '200':
          description: Variants found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variants:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/variantForAdmin'
                        - $ref: '#/components/schemas/timestamps'
                allOf:
                  - $ref: '#/components/schemas/pagination'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/users:
    get:
      tags:
        - Admin Users
      summary: Get all users
      description: |
        Get all users
        Support filtering, sorting, and pagination
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
            example: 1
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
            example: 10
        - name: email
          in: query
          description: Filter by email
          required: false
          schema:
            type: string
            example: '[like]gmail.com'
        - name: name
          in: query
          description: Filter by name
          required: false
          schema:
            type: string
            example: '[like]John'
        - name: role
          in: query
          description: Filter by role
          required: false
          schema:
            type: string
            enum:
              - user
              - admin
            example: user
        - name: createdAt
          in: query
          description: Filter by createdAt
          required: false
          schema:
            type: string
            example: '[between]2021-01-01,2021-12-31'
        - name: updatedAt
          in: query
          description: Filter by updatedAt
          required: false
          schema:
            type: string
            example: '[between]2021-01-01,2021-12-31'
        - name: sort
          in: query
          description: Sort by field
          required: false
          schema:
            type: string
            example: '-createdAt,name'
      responses:
        '200':
          description: Get all users successful
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  users:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/paths/~1admin~1users~1%7BuserID%7D/get/responses/200/content/application~1json/schema/properties/user/allOf/0'
                        - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/users/{userID}':
    get:
      tags:
        - Admin Users
      summary: Get user by ID
      description: 'Get user by ID, association with its addresses'
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          description: User ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Get user by ID successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    allOf:
                      - type: object
                        properties:
                          userID:
                            type: string
                            example: '1'
                          email:
                            type: string
                            example: example@gmail.com
                          name:
                            type: string
                            example: John Doe
                          role:
                            type: string
                            example: user
                          avatar:
                            type: string
                            example: 'https://example.com/avatar.jpg'
                      - $ref: '#/components/schemas/timestamps'
                    properties:
                      addresses:
                        type: array
                        items:
                          type: object
                          properties:
                            addressID:
                              type: string
                              example: '1'
                            userID:
                              type: string
                              example: '1'
                            phoneNumber:
                              type: string
                              example: 0123456789
                            recipientName:
                              type: string
                              example: John Doe
                            address:
                              type: string
                              example: 123 Bui Huu Nghia
                            city:
                              type: string
                              example: Bien Hoa City
                            district:
                              type: string
                              example: Dong Nai
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Users
      summary: Delete user by ID
      description: 'Delete user by ID, all addresses and cart items will be deleted as well'
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          description: User ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Delete user by ID successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/users/{userID}/cart':
    get:
      tags:
        - Admin Users
      summary: Get user's cart
      description: |
        Get user's cart
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          description: User ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Get user's cart successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    error400:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: field
              value:
                description: The value of the field that caused the error (can be anything)
                example: {}
              message:
                type: string
                example: Something is invalid
              path:
                type: string
                example: 'array[0].field'
              location:
                type: string
                example: body
    error401:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: Token invalid
    error403:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: Not an admin. Cannot retrieve administrative data
    error404:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
                example: NotFound
              message:
                type: string
                example: Something not found
    error500:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: InternalServerError
              message:
                type: string
                example: Something went wrong
    product:
      type: object
      properties:
        productID:
          type: string
          example: '1'
        name:
          type: string
          example: T-shirt
        description:
          type: string
          nullable: true
    variantForUser:
      type: object
      properties:
        variantID:
          type: string
          example: '101'
        price:
          type: integer
          example: 100
        discountPrice:
          type: integer
          example: 90
          nullable: true
        productID:
          type: string
          example: '1'
        image:
          type: string
          example: image.com/image.jpg
          nullable: true
    variantForAdmin:
      type: object
      properties:
        variantID:
          type: string
          example: '101'
        price:
          type: number
          example: 100
        discountPrice:
          type: number
          example: 90
          nullable: true
        stock:
          type: integer
          example: 10
        sku:
          type: string
        productID:
          type: string
          example: '1'
        image:
          type: string
          example: image.com/image.jpg
          nullable: true
    variantAttribute:
      type: object
      properties:
        attributes:
          type: object
          description: Dynamic attributes of the product
          example:
            color: red
            size: M
    image:
      type: object
      properties:
        imageID:
          type: string
          example: '101'
        url:
          type: string
          example: image.com/image.jpg
        thumbnail:
          type: string
          nullable: true
        displayOrder:
          type: integer
          example: 1
        productID:
          type: string
          example: '1'
    categoryNames:
      type: array
      example:
        - tops
        - male
      items:
        type: string
    category:
      type: object
      properties:
        categoryID:
          type: string
          example: '8'
        name:
          type: string
          example: tshirt
        description:
          type: string
          nullable: true
        parentID:
          type: string
          example: '6'
    coupon:
      type: object
      properties:
        couponID:
          type: string
          example: '1'
        code:
          type: string
          example: 10OFF
        discountValue:
          type: number
          example: 10
        discountType:
          type: string
          enum:
            - percentage
            - fixed
          example: percentage
        target:
          type: string
          enum:
            - single
            - all
          example: all
        minimumOrderAmount:
          type: number
          example: 100
        timesUsed:
          type: number
          example: 1
        maxUsage:
          type: number
          example: 10
          nullable: true
        startDate:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00Z'
          nullable: true
        endDate:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00Z'
          nullable: true
    attribute:
      type: object
      properties:
        attributeID:
          type: string
          example: '1'
        name:
          type: string
          example: color
    value:
      type: object
      properties:
        valueID:
          type: string
          example: '1'
        value:
          type: string
          example: red
        attributeID:
          type: string
          example: '1'
    timestamps:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
    pagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 20

openapi: 3.0.0
info:
  title: E-commerce API
  description: This API provides endpoints for managing products in an E-commerce system.
  version: 2.0.0
servers:
  - url: 'https://localhost:3000/api/v2'
tags:
  - name: Authentication
    description: This field represents the description of something.
  - name: User Products
    description: This field represents the description of something.
  - name: Admin Products
    description: This field represents the description of something.
paths:
  /auth/signin:
    post:
      tags:
        - Authentication
      summary: Sign in
      description: Sign in with the given credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: Sign in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      userID:
                        type: string
                        example: '1'
                      email:
                        type: string
                        example: example@gmail.com
                      role:
                        type: string
                        example: user
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Email or password incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  error:
                    type: string
                    example: Conflict Error
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Sign up
      description: Sign up with the given credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
                password:
                  type: string
                  example: password
                role:
                  type: string
                  enum:
                    - user
                    - admin
                  example: user
      responses:
        '201':
          description: Sign up successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      userID:
                        type: string
                        example: '1'
                      email:
                        type: string
                        example: example@gmail.com
                      role:
                        type: string
                        example: user
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signin/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /auth/refreshToken:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Refresh the access token with the given refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: refreshToken
      responses:
        '200':
          description: Refresh token successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  accessToken:
                    type: string
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /auth/refreshToken/reset:
    post:
      tags:
        - Authentication
      summary: Reset refresh token
      description: Reset the refresh token with the given refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: refreshToken
      responses:
        '200':
          description: Reset refresh token successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /products:
    get:
      tags:
        - User Products
      summary: Get all products
      description: 'Retrieves a list of all products with optional filtering, sorting, and pagination. <br> - Filtering by name, category, variant, and attributes. <br> - Sorting by one or more fields. <br> - Pagination by page and size. <br>'
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: name
          in: query
          description: 'Filter by name. Support partial matching using "[like]name"'
          required: false
          schema:
            type: string
        - name: variant
          in: query
          description: 'Filter by variant''s price and discountPrice. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          style: deepObject
          explode: false
          schema:
            type: object
            properties:
              price:
                pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
                example: '[gte]100'
              discountPrice:
                pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
                example: 90
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            $ref: '#/components/schemas/categoryNames'
        - name: sort
          in: query
          description: 'Sort products by one or more fields. <br> - A comma-separated list of fields ("price,-discountPrice"). <br> - A single field ("price"). <br> - An array of fields (["price", "-discountPrice"]). <br> A leading ''-'' indicates descending order. <br> Sorting is applied from left to right'
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
        - name: oneVariant
          in: query
          description: Return only one variant of each product
          required: false
          schema:
            type: boolean
            example: true
        - name: attributes
          in: query
          description: Filter by attributes
          required: false
          style: deepObject
          explode: false
          schema:
            type: object
            description: Dynamic attributes of the product
            properties:
              color:
                type: string
                example: red
              size:
                type: string
                example: M
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
                  totalItems:
                    type: integer
                    example: 20
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        variants:
                          type: array
                          items:
                            $ref: '#/components/schemas/variantForUser'
                        categories:
                          $ref: '#/components/schemas/categoryNames'
                      allOf:
                        - $ref: '#/components/schemas/product'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}':
    get:
      tags:
        - User Products
      summary: Get a product by ID
      description: Retrieves a product by its ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  product:
                    type: object
                    properties:
                      variants:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/variantForUser'
                            - $ref: '#/components/schemas/variantAttribute'
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}/variants':
    get:
      tags:
        - User Products
      summary: Get product variants
      description: Returns all variants of a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get variants
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Variants found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  variants:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/variantForUser'
                      properties:
                        attributes:
                          $ref: '#/components/schemas/variantAttribute'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}/images':
    get:
      tags:
        - User Products
      summary: Get product images
      description: Returns all images of a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get images
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Images found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  images:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/image'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}/categories':
    get:
      tags:
        - User Products
      summary: Get product categories
      description: Returns all categories of a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get categories
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Categories found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  categories:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/category'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/products:
    get:
      tags:
        - Admin Products
      summary: Get all products
      description: 'Retrieves a list of all products with optional filtering, sorting, and pagination. <br> - Filtering by name, category, variant, and attributes. <br> - Sorting by one or more fields. <br> - Pagination by page and size. <br>'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: name
          in: query
          description: 'Filter by name. Support partial matching using "[like]name"'
          required: false
          schema:
            type: string
        - name: variant
          in: query
          style: deepObject
          explode: true
          description: 'Filter by variant''s price and discountPrice. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          schema:
            type: object
            properties:
              price:
                pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
                example: '[gte]100'
              discountPrice:
                pattern: '/^(?:\[(lte|gte)\]\d+|\[between]\d+,\d+|\d+)$/'
                example: 90
              sku:
                type: string
              stock:
                type: integer
                example: 10
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            $ref: '#/components/schemas/categoryNames'
        - name: sort
          in: query
          description: 'Sort products by one or more fields. <br> - A comma-separated list of fields ("price,-discountPrice"). <br> - A single field ("price"). <br> - An array of fields (["price", "-discountPrice"]). <br> A leading ''-'' indicates descending order. <br> Sorting is applied from left to right'
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
        - name: oneVariant
          in: query
          description: Return only one variant of each product
          required: false
          schema:
            type: boolean
            example: true
        - name: attributes
          in: query
          description: Filter by attributes
          required: false
          style: deepObject
          schema:
            type: object
            description: Dynamic attributes of the product
            properties:
              color:
                type: string
                example: red
              size:
                type: string
                example: M
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
                  totalItems:
                    type: integer
                    example: 20
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        variants:
                          type: array
                          items:
                            type: object
                            allOf:
                              - $ref: '#/components/schemas/variantForAdmin'
                              - $ref: '#/components/schemas/timestamps'
                        categories:
                          allOf:
                            - $ref: '#/components/schemas/categoryNames'
                      allOf:
                        - $ref: '#/components/schemas/product'
                        - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}':
    get:
      tags:
        - Admin Products
      summary: Get a product
      security:
        - bearerAuth: []
      description: Returns a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  product:
                    type: object
                    properties:
                      variants:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/variantForAdmin'
                            - $ref: '#/components/schemas/timestamps'
                          properties:
                            attributes:
                              $ref: '#/components/schemas/variantAttribute'
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Products
      summary: Create a new product
      description: Creates a new product with the given data.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: T-Shirt
                description:
                  type: string
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      price:
                        type: number
                        example: 100
                      discountPrice:
                        type: number
                        example: 90
                        nullable: true
                      stock:
                        type: integer
                        example: 10
                      sku:
                        type: string
                    allOf:
                      - $ref: '#/components/schemas/variantForAdmin'
                categories:
                  $ref: '#/components/schemas/categoryNames'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  product:
                    type: object
                    properties:
                      variants:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/variantForAdmin'
                            - $ref: '#/components/schemas/variantAttribute'
                            - $ref: '#/components/schemas/timestamps'
                      images:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/image'
                            - $ref: '#/components/schemas/timestamps'
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Products
      summary: Update a product
      description: Updates a product with the given data.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to update
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Product Name
                description:
                  type: string
                  example: Product Description
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  product:
                    type: object
                    properties:
                      productID:
                        type: string
                        example: '1'
                      name:
                        type: string
                        example: Product Name
                      description:
                        type: string
                        example: Product Description
                    allOf:
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Products
      summary: Delete a product
      description: Deletes a product with the given ID.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to delete
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    error400:
      type: object
      properties:
        success:
          type: string
          example: 'false'
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: field
              value:
                description: The value of the field that caused the error (can be anything)
                example: {}
              message:
                type: string
                example: Price is required
              path:
                type: string
                example: 'variants[0].price'
              location:
                type: string
                example: body
    error401:
      type: object
      properties:
        success:
          type: string
          example: 'false'
        error:
          type: string
          example: Token invalid
    error403:
      type: object
      properties:
        success:
          type: string
          example: 'false'
        error:
          type: string
          example: Not an admin. Cannot retrieve administrative data
    error404:
      type: object
      properties:
        success:
          type: string
          example: 'false'
        error:
          type: string
          example: Something not found
    error500:
      type: object
      properties:
        success:
          type: string
          example: 'false'
        error:
          type: string
          example: Server error
    product:
      type: object
      properties:
        productID:
          type: string
          example: '1'
        name:
          type: string
          example: T-shirt
        description:
          type: string
          nullable: true
    variantForUser:
      type: object
      properties:
        variantID:
          type: string
          example: '101'
        price:
          type: integer
          example: 100
        discountPrice:
          type: integer
          example: 90
          nullable: true
        productID:
          type: string
          example: '1'
        image:
          type: string
          example: image.com/image.jpg
          nullable: true
    variantForAdmin:
      type: object
      properties:
        variantID:
          type: string
          example: '101'
        price:
          type: number
          example: 100
        discountPrice:
          type: number
          example: 90
          nullable: true
        stock:
          type: integer
          example: 10
        sku:
          type: string
        productID:
          type: string
          example: '1'
        image:
          type: string
          example: image.com/image.jpg
          nullable: true
    variantAttribute:
      type: object
      properties:
        attributes:
          type: object
          description: Dynamic attributes of the product
          example:
            color: red
            size: M
    categoryNames:
      type: array
      example:
        - tops
        - male
      items:
        type: string
    image:
      type: object
      properties:
        imageID:
          type: string
          example: '101'
        url:
          type: string
          example: image.com/image.jpg
        thumbnail:
          type: string
          nullable: true
        displayOrder:
          type: integer
          example: 1
        productID:
          type: string
          example: '1'
    category:
      type: object
      properties:
        categoryID:
          type: string
          example: '8'
        name:
          type: string
          example: tshirt
        description:
          type: string
          nullable: true
        parentID:
          type: string
          example: '6'
    timestamps:
      type: object
      properties:
        createdAt:
          type: string
          format: date
          example: '2024-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date
          example: '2024-01-01T00:00:00.000Z'

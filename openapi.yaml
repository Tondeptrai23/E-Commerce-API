openapi: 3.0.0
info:
  title: E-commerce API
  description: This API provides endpoints for managing products in an E-commerce system.
  version: 2.0.0
servers:
  - url: 'https://localhost:3000/api/v2'
tags:
  - name: Authentication
    description: Endpoints related to user authentication and authorization.
  - name: User Products
    description: Endpoints for managing user-specific product interactions.
  - name: User Categories
    description: Endpoints for managing user-specific category interactions.
  - name: User Cart
    description: Endpoints for managing user shopping carts.
  - name: User Orders
    description: Endpoints for managing user orders.
  - name: User Address
    description: Endpoints for managing user addresses.
  - name: Admin Products
    description: 'Endpoints for managing product data, variants, images and categories.'
  - name: Admin Variants
    description: Endpoints for managing variants.
  - name: Admin Categories
    description: Endpoints for managing categories.
  - name: Admin Coupons
    description: Endpoints for managing discount coupons.
  - name: Admin Attributes
    description: Endpoints for managing attributes.
  - name: Admin Attribute Values
    description: Endpoints for managing attribute values.
  - name: Admin Orders
    description: Endpoints for managing orders.
externalDocs:
  description: Detailed Query Parameters Documentation
  url: 'https://github.com/Tondeptrai23/E-Commerce-API/blob/main/src/v2/document/docs/query.md'
paths:
  /auth/signin:
    post:
      tags:
        - Authentication
      summary: Sign in
      description: Sign in with the given credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: Sign in successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      userID:
                        type: string
                        example: '1'
                      email:
                        type: string
                        example: example@gmail.com
                      name:
                        type: string
                        example: John Doe
                        nullable: true
                      role:
                        type: string
                        example: user
                      avatar:
                        type: string
                        example: 'https://example.com/avatar.jpg'
                        nullable: true
        '401':
          description: Email or password incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Sign up
      description: Sign up with the given credentials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@gmail.com
                password:
                  type: string
                  example: password
                name:
                  type: string
                  example: User Name
      responses:
        '201':
          description: Sign up successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '409':
          description: Email or name already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: Conflict
                        message:
                          type: string
                          example: Something already exists
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /auth/refreshToken:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Refresh the access token with the given refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: refreshToken
      responses:
        '200':
          description: Refresh token successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /auth/refreshToken/reset:
    post:
      tags:
        - Authentication
      summary: Reset refresh token
      description: Reset the refresh token with the given refresh token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: refreshToken
      responses:
        '200':
          description: Reset refresh token successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /products:
    get:
      tags:
        - User Products
      summary: Get all products
      description: 'Retrieves a list of all products with optional filtering, sorting, and pagination. <br> - Filtering by name, category, variant, and attributes. <br> - Sorting by one or more fields. <br> - Pagination by page and size. <br> - Only one variant per product is returned, selected as the first variant matching all filter criteria when sorting variants by specified filters. <br> - If `sort` is not provided, the default sort is by `createdAt` in descending order. <br>'
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: name
          in: query
          description: 'Filter by name. <br> For more information, see [String Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            example: '[like]Product'
        - name: variant
          in: query
          description: Filter by variant's field.
          required: false
          style: deepObject
          explode: false
          schema:
            type: object
            properties:
              price:
                description: 'Filter by price For more information, see [Number Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
                example: '[lte]100'
              discountPrice:
                description: 'Filter by discountPrice For more information, see [Number Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
                example: '[gte]30'
              sku:
                description: 'Filter by sku For more information, see [String Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
                example: '[like]T'
              stock:
                description: 'Filter by stock For more information, see [Number Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
                example: '[gte]5'
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            $ref: '#/components/schemas/categoryNames'
        - name: sort
          in: query
          description: |
            Sort products by one or more fields.
            Support fields: `name`, `price`, `discountPrice`, `stock`.
            For more information, see [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting).
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
        - name: attributes
          in: query
          description: 'Filter by variants'' attributes. <br> For more information, see the [Filter By Variant Attributes](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md##get-products-and-get-adminproducts-1).'
          required: false
          style: deepObject
          explode: false
          schema:
            type: object
            description: Dynamic attributes of the product
            properties:
              color:
                example: red
              size:
                example: 'M,L'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 10
                  totalItems:
                    type: integer
                    example: 20
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        variants:
                          type: array
                          items:
                            $ref: '#/components/schemas/variant'
                        categories:
                          $ref: '#/components/schemas/categoryNames'
                      allOf:
                        - $ref: '#/components/schemas/product'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}':
    get:
      tags:
        - User Products
      summary: Get a product by ID
      description: Retrieves a product by its ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      variants:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/variant'
                            - $ref: '#/components/schemas/variantAttribute'
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                      images:
                        type: array
                        items:
                          $ref: '#/components/schemas/image'
                    allOf:
                      - $ref: '#/components/schemas/product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}/variants':
    get:
      tags:
        - User Products
      summary: Get product variants
      description: Returns all variants of a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get variants
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Variants found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variants:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/variant'
                      properties:
                        attributes:
                          $ref: '#/components/schemas/variantAttribute'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}/images':
    get:
      tags:
        - User Products
      summary: Get product images
      description: Returns all images of a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get images
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Images found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  images:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/image'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/products/{productID}/categories':
    get:
      tags:
        - User Products
      summary: Get product categories
      description: Returns all categories of a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get categories
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Categories found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/category'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /categories:
    get:
      tags:
        - User Categories
      summary: Get all categories
      description: |
        Get all categories.
      parameters:
        - name: page
          in: query
          description: The page number
          required: false
          schema:
            example: 1
        - name: size
          in: query
          description: The number of categories per page
          required: false
          schema:
            example: 10
      responses:
        '200':
          description: Categories found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/categories/{categoryName}':
    get:
      tags:
        - User Categories
      summary: Get a category
      description: |
        Get a category by name.
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  category:
                    type: array
                    items:
                      type: object
                      properties:
                        parent:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/category'
                      allOf:
                        - $ref: '#/components/schemas/category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/categories/{categoryName}/ascendants':
    get:
      tags:
        - User Categories
      summary: Get all ascendant categories of a category
      description: |
        Get all ascendant categories of a category by name. Includes the category itself.
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/categories/{categoryName}/descendants':
    get:
      tags:
        - User Categories
      summary: Get all descendant categories of a category
      description: |
        Get all descendant categories of a category by name. Includes the category itself.
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /cart:
    get:
      tags:
        - User Cart
      summary: Get user cart
      description: |
        Get the user's cart.
        - The cart is a list of items that the user has added to their cart.
        - Support pagination.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
            example: 1
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Cart found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  cart:
                    type: array
                    items:
                      $ref: '#/paths/~1cart~1items/post/responses/200/content/application~1json/schema/properties/cartItem'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - User Cart
      summary: Fetch cart to order
      description: |
        Fetch cart items to a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: VariantIDs in cart that the user wants to order. <br> - The variantID must be in the cart. <br> - The variantID will be left in the cart until the order is checked out.
              type: object
              properties:
                variantIDs:
                  type: array
                  items:
                    type: string
                  example:
                    - '1'
                    - '2'
      responses:
        '200':
          description: Cart fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  order:
                    type: object
                    properties:
                      coupon:
                        type: string
                        example: CODE
                      orderItems:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/variant'
                          properties:
                            quantity:
                              type: number
                              example: 1
                            totalPrice:
                              type: number
                              example: 90
                    allOf:
                      - $ref: '#/components/schemas/order'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - User Cart
      summary: Delete cart
      description: |
        Delete all cart items in cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /cart/items:
    post:
      tags:
        - User Cart
      summary: Add item to cart
      description: |
        Add item to cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: VariantID in cart that the user wants to add.
              type: object
              properties:
                variantID:
                  type: string
                  example: '1'
                quantity:
                  type: number
                  example: 1
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  cartItem:
                    type: object
                    properties:
                      cartItemID:
                        type: string
                        example: '1'
                      variantID:
                        type: string
                        example: '1'
                      productID:
                        type: string
                        example: '1'
                      name:
                        type: string
                        example: Product 1
                      price:
                        type: number
                        example: 100
                      discountPrice:
                        type: number
                        example: 90
                      quantity:
                        type: number
                        example: 1
                      totalPrice:
                        type: number
                        example: 100
                      image:
                        type: string
                        example: image.jpg
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
  '/cart/items/{variantID}':
    patch:
      tags:
        - User Cart
      summary: Update item in cart
      description: |
        Update item in cart 
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: variantID
          required: true
          description: VariantID in cart that the user wants to update.
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Quantity of the variantID that the user wants to update.
              type: object
              properties:
                quantity:
                  type: number
                  example: 1
      responses:
        '200':
          description: Item updated in cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  cartItem:
                    $ref: '#/paths/~1cart~1items/post/responses/200/content/application~1json/schema/properties/cartItem'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - User Cart
      summary: Delete item from cart
      description: |
        Delete item from cart
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: variantID
          required: true
          description: VariantID in cart that the user wants to delete.
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Item deleted from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /orders:
    get:
      tags:
        - User Orders
      summary: Get orders
      description: 'Get all orders belongs to user. <br> - The orders will not be shown if it is marked as deleted. <br> - Support pagination, filtering, and sorting. <br> - Don''t support filtering or sorting by nested fields. <br>'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
            example: 1
        - name: size
          in: query
          description: Size per page
          required: false
          schema:
            type: integer
            example: 10
        - name: sort
          in: query
          description: 'Sort orders by one or more fields. <br> - A comma-separated list of fields ("finalTotal,-createdAt"). <br> - A single field ("finalTotal"). <br> - An array of fields (["finalTotal", "-createdAt"]). <br>'
          required: false
          schema:
            type: string
            example: 'finalTotal,-createdAt'
        - name: status
          in: query
          description: Filter by status
          required: false
          schema:
            type: string
            example: delivered
        - name: paymentMethod
          in: query
          description: Filter by payment method
          required: false
          schema:
            type: string
            example: COD
        - name: subTotal
          in: query
          description: 'Filter by subTotal. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          schema:
            type: string
            example: '[gte]100'
        - name: finalTotal
          in: query
          description: 'Filter by finalTotal. <br> - Support operators "[lte]100", "[gte]100", "[between]100,200"'
          required: false
          schema:
            type: string
            example: '[gte]100'
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> - Support operators "[lte]2021-01-01", "[gte]2021-01-01", "[between]2021-01-01,2021-12-31"'
          required: false
          schema:
            type: string
            example: '[gte]2021-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> - Support operators "[lte]2021-01-01", "[gte]2021-01-01", "[between]2021-01-01,2021-12-31"'
          required: false
          schema:
            type: string
            example: '[lte]2021-12-31'
      responses:
        '200':
          description: Orders found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  orders:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/order'
                        - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/orders/{orderID}':
    get:
      tags:
        - User Orders
      summary: Get an order
      description: Get an order belongs to user by orderID. <br> - The order will not be shown if it is marked as deleted. <br>
      security:
        - bearerAuth: []
      parameters:
        - name: orderID
          in: path
          description: Order ID
          required: true
          schema:
            type: string
          example: '1'
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  order:
                    $ref: '#/paths/~1cart/post/responses/200/content/application~1json/schema/properties/order'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - User Orders
      summary: Delete an order
      description: 'Delete an order belongs to user by orderID. <br> - Only delivered order or pending order can be deleted. <br> - The order will be marked as deleted, only pending order will be permanently deleted. <br>'
      security:
        - bearerAuth: []
      parameters:
        - name: orderID
          in: path
          description: Order ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Order deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Order cannot be deleted
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /orders/pending:
    get:
      tags:
        - User Orders
      summary: Retrieve the user's pending order
      description: 'Retrieves the user''s active pending order. <br> A user can only have one pending order at a time for buying items, applying coupons, and checking out.'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Pending order found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  order:
                    type: object
                    properties:
                      shippingAddress:
                        $ref: '#/components/schemas/address'
                    allOf:
                      - $ref: '#/paths/~1cart/post/responses/200/content/application~1json/schema/properties/order'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Pending order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - User Orders
      summary: Check out pending order (Will be added later)
    patch:
      tags:
        - User Orders
      summary: Update a pending order
      description: Update message or shipping address for a pending order.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: Please deliver before 5pm
                shippingAddressID:
                  type: string
                  example: '1'
      responses:
        '200':
          description: Pending order found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  order:
                    type: object
                    properties:
                      shippingAddress:
                        $ref: '#/components/schemas/address'
                    allOf:
                      - $ref: '#/paths/~1cart/post/responses/200/content/application~1json/schema/properties/order'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Pending order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /orders/pending/coupons:
    get:
      tags:
        - User Orders
      summary: Get recommended coupons for pending order
      description: Retrieves a list of recommended coupons applicable to the specified pending order. These coupons can be applied to reduce the order's total amount.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Recommended coupons found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupons:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: CODE
                        subTotal:
                          type: number
                          example: 100
                        finalTotal:
                          type: number
                          example: 90
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Pending order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - User Orders
      summary: Apply a coupon to a pending order
      description: Applies the specified coupon to the user's pending order. The coupon must be valid and available.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: CODE
      responses:
        '200':
          description: Apply coupon successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  order:
                    type: object
                    properties:
                      shippingAddressID:
                        type: string
                        example: '1'
                    allOf:
                      - $ref: '#/paths/~1cart/post/responses/200/content/application~1json/schema/properties/order'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Pending order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /address:
    get:
      tags:
        - User Address
      summary: Get addresses
      description: |
        Get all addresses of the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Addresses found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  addresses:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/address'
                        - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - User Address
      summary: Add address
      description: |
        Add address to the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  example: 0123456789
                recipientName:
                  type: string
                  example: John Doe
                address:
                  type: string
                  example: 123 Bui Huu Nghia
                city:
                  type: string
                  example: Bien Hoa City
                district:
                  type: string
                  example: Dong Nai
      responses:
        '200':
          description: Address added
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  address:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/address'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/address/{addressID}':
    get:
      tags:
        - User Address
      summary: Get address by addressID
      description: |
        Get address by addressID
        Only the owner can get the address
      security:
        - bearerAuth: []
      parameters:
        - name: addressID
          in: path
          description: Address ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Address found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  address:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/address'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - User Address
      summary: Update address by addressID
      description: |
        Update address by addressID
      security:
        - bearerAuth: []
      parameters:
        - name: addressID
          in: path
          description: Address ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phoneNumber:
                  type: string
                  example: 0123456789
                  nullable: true
                address:
                  type: string
                  example: 123 Bui Huu Nghia
                  nullable: true
                recipientName:
                  type: string
                  example: John Doe
                  nullable: true
                city:
                  type: string
                  example: Bien Hoa City
                  nullable: true
                district:
                  type: string
                  example: Dong Nai
                  nullable: true
      responses:
        '200':
          description: Address updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  address:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/address'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - User Address
      summary: Soft delete address by addressID
      description: |
        Soft delete the address by setting `deletedAt` to current datetime. <br>
        If the pending order is associated with the address, the order will be permanently deleted. <br>
        Deleted addresses cannot be recovered.
      security:
        - bearerAuth: []
      parameters:
        - name: addressID
          in: path
          description: Address ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Address deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '404':
          description: Address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/products:
    get:
      tags:
        - Admin Products
      summary: Retrieve all products
      description: 'Retrieves a list of all products with optional filtering, sorting, and pagination. <br> Admin-specific filters and sorting options are available, including product ID, creation date, and update date. <br> Only one variant per product is returned, selected as the first variant matching all filter criteria when sorting variants by specified filters. <br>'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: productID
          in: query
          description: 'Filter by productID. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#query-string).'
          required: false
          schema:
            type: string
            example: '[like]1'
        - name: name
          in: query
          description: 'Filter by name. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            type: string
            example: '[like]T-shirt'
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            type: string
            example: '[gte]2024-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            type: string
            example: '[gte]2024-01-01'
        - name: deletedAt
          in: query
          description: 'Filter by deletedAt. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          schema:
            type: string
            example: '[gte]2024-01-01'
        - name: variant
          in: query
          style: deepObject
          explode: true
          description: Filter by variant's properties. <br>
          required: false
          schema:
            type: object
            properties:
              price:
                description: |
                  [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering) 
                example: '[gte]50'
              discountPrice:
                description: |
                  [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering) 
                example: '[lte]50'
              sku:
                description: |
                  [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering)
                example: SKU123
              stock:
                description: |
                  [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering) 
                example: '[gte]10'
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            $ref: '#/components/schemas/categoryNames'
        - name: sort
          in: query
          description: |
            Sort products by one or more fields. <br>
            Support fields: `productID`, `name`, `price`, `discountPrice`, `stock`, `createdAt`, `updatedAt`, `deletedAt`. <br>
            For more information, see the [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting).
          required: false
          example: 'price,-stock'
          schema:
            oneOf:
              - type: string
              - type: array
                items:
                  type: string
        - name: attributes
          in: query
          description: 'Filter products by attributes. <br> For more information, see the [Filter By Variant Attributes](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md##get-products-and-get-adminproducts-1).'
          required: false
          style: deepObject
          schema:
            type: object
            description: Dynamic attributes of the product
            properties:
              color:
                example: red
              size:
                example: 'M,L'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        variants:
                          type: array
                          items:
                            allOf:
                              - $ref: '#/components/schemas/variant'
                              - $ref: '#/components/schemas/timestamps'
                              - $ref: '#/paths/~1admin~1orders~1%7BorderID%7D/get/responses/200/content/application~1json/schema/properties/order/allOf/2'
                        categories:
                          $ref: '#/components/schemas/categoryNames'
                      allOf:
                        - $ref: '#/components/schemas/product'
                        - $ref: '#/components/schemas/timestamps'
                        - $ref: '#/paths/~1admin~1orders~1%7BorderID%7D/get/responses/200/content/application~1json/schema/properties/order/allOf/2'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Products
      summary: Create a product
      description: 'Creates a new product. <br> The product name must be unique. <br> The order of images in the request body determines their display order on the product. <br> The product should have at least 1 variant. <br> If variant''s name is not provided, it will use the product name'
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: T-Shirt
                description:
                  type: string
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Red T-Shirt
                        nullable: true
                      price:
                        type: number
                        example: 100
                      discountPrice:
                        type: number
                        example: 90
                        nullable: true
                      stock:
                        type: integer
                        example: 10
                      sku:
                        type: string
                      imageIndex:
                        type: number
                        example: 0
                      attributes:
                        type: object
                        description: Dynamic attributes of the product
                        example:
                          color: red
                          size: M
                categories:
                  $ref: '#/components/schemas/categoryNames'
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                        example: 'https://example.com/image.jpg'
                      altText:
                        type: string
                        example: Red T-Shirt
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: true
                  product:
                    type: object
                    properties:
                      variants:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/variant'
                            - $ref: '#/components/schemas/variantAttribute'
                      images:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/image'
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '409':
          description: Product name already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}':
    get:
      tags:
        - Admin Products
      summary: Get a product
      security:
        - bearerAuth: []
      description: Returns a product with the given ID.
      parameters:
        - name: productID
          in: path
          description: ID of the product to get
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      variants:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/variant'
                            - $ref: '#/components/schemas/timestamps'
                            - $ref: '#/paths/~1admin~1orders~1%7BorderID%7D/get/responses/200/content/application~1json/schema/properties/order/allOf/2'
                          properties:
                            attributes:
                              $ref: '#/components/schemas/variantAttribute'
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
                      - $ref: '#/paths/~1admin~1orders~1%7BorderID%7D/get/responses/200/content/application~1json/schema/properties/order/allOf/2'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Products
      summary: Update a product
      description: Updates a product with the given data. <br> Product name must be unique. <br> Cannot update deleted products.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to update
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Product Name
                  nullable: true
                description:
                  type: string
                  example: Product Description
                  nullable: true
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      productID:
                        type: string
                        example: '1'
                      name:
                        type: string
                        example: Product Name
                      description:
                        type: string
                        example: Product Description
                    allOf:
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Product name already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Products
      summary: Delete a product
      description: Soft deletes a product with the given ID. <br> Set the `deletedAt` field to the current date and time. <br> Deleting a product will also soft delete variants. <br>
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to delete
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/variants':
    get:
      tags:
        - Admin Products
      summary: Retrieve product variants
      description: Retrieves a list of all variants associated with a specific product.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to get variants of
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Variants found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variants:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/variant'
                        - $ref: '#/components/schemas/timestamps'
                        - $ref: '#/components/schemas/variantAttribute'
                        - $ref: '#/paths/~1admin~1orders~1%7BorderID%7D/get/responses/200/content/application~1json/schema/properties/order/allOf/2'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Products
      summary: Create product variants
      description: 'Creates multiple product variants for the specified product. <br> If variant''s name is not provided, it will use the product name. <br> If image is provided, a new product image will be created and associated with the variant'
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to create variants for
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Variant name
                        nullable: true
                      price:
                        type: number
                        example: 100
                      discountPrice:
                        type: number
                        example: 90
                        nullable: true
                      stock:
                        type: integer
                        example: 10
                      image:
                        type: object
                        properties:
                          url:
                            type: string
                            example: image.com/image.jpg
                          altText:
                            type: string
                            nullable: true
                      sku:
                        type: string
                    allOf:
                      - $ref: '#/components/schemas/variantAttribute'
      responses:
        '201':
          description: Variant created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variant:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/variant'
                      - $ref: '#/components/schemas/timestamps'
                      - $ref: '#/components/schemas/variantAttribute'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or variant or image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: SKU already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/variants/{variantID}':
    get:
      tags:
        - Admin Products
      summary: Get a variant of a product
      description: Retrieves detailed information about a specific variant belonging to a product.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to get a variant of
          required: true
          schema:
            type: string
            example: '1'
        - name: variantID
          in: path
          description: ID of the variant to get
          required: true
          schema:
            type: string
            example: '101'
      responses:
        '200':
          description: Variant found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: true
                  variant:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/variant'
                      - $ref: '#/components/schemas/timestamps'
                      - $ref: '#/components/schemas/variantAttribute'
                      - $ref: '#/paths/~1admin~1orders~1%7BorderID%7D/get/responses/200/content/application~1json/schema/properties/order/allOf/2'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/images':
    get:
      tags:
        - Admin Products
      summary: Get images of a product
      description: Retrieve all images of a product with the given ID.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to get images
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Images found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  images:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/image'
                        - $ref: '#/components/schemas/timestamps'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Products
      summary: Add images to a product
      description: Add images to a product. The images will be added to the end of the list.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to add images to
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        description: Image data to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
                        example: 'https://example.com/image.jpg'
                      altText:
                        type: string
                        example: A beautiful image
      responses:
        '200':
          description: Images added
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  images:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/image'
                        - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Products
      summary: Reorder product images
      description: Reorders the images associated with a product. <br> The request body should contain an array of image IDs specifying the desired display order. <br> Images not included in the array will be moved to the end of the list.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to reorder images of
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        description: Image data to reorder
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                  example:
                    - '1'
                    - '2'
                    - '3'
      responses:
        '200':
          description: Images reordered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  images:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/image'
                        - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/images/{imageID}':
    patch:
      tags:
        - Admin Products
      summary: Update an image of a product
      description: Updates an image of a product with the given data.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to update an image of
          required: true
          schema:
            type: string
            example: '1'
        - name: imageID
          in: path
          description: ID of the image to update
          required: true
          schema:
            type: string
            example: '101'
      requestBody:
        description: Image data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  example: 'https://example.com/image.jpg'
                altText:
                  type: string
                  example: A beautiful image
      responses:
        '200':
          description: Image updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  image:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/image'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Products
      summary: Delete an image from a product
      description: Delete an image from a product. <br> Permanently deletes the image from the product (Even deleted product). <br> Display order of images will be updated. <br> Cannot delete the last image of a product.
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to delete an image from
          required: true
          schema:
            type: string
            example: '1'
        - name: imageID
          in: path
          description: ID of the image to delete
          required: true
          schema:
            type: string
            example: '102'
      responses:
        '200':
          description: Image deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/categories':
    get:
      tags:
        - Admin Products
      summary: Get all categories of a product
      description: Get all categories of a product
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to get categories of
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Categories found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/category'
                        - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Products
      summary: Add categories to a product
      description: Add categories to a product (category must exist)
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to add a category to
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        description: Categories to add
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  $ref: '#/components/schemas/categoryNames'
      responses:
        '200':
          description: Category added
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    put:
      tags:
        - Admin Products
      summary: Update product categories
      description: 'Replaces the entire set of categories associated with a product. <br> Any existing categories will be removed, and the provided categories will be assigned.'
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to update categories of
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        description: Categories to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  $ref: '#/components/schemas/categoryNames'
      responses:
        '200':
          description: Categories updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  product:
                    type: object
                    properties:
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/product'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/products/{productID}/categories/{categoryName}':
    delete:
      tags:
        - Admin Products
      summary: Delete a category from a product
      description: Delete a category from a product
      security:
        - bearerAuth: []
      parameters:
        - name: productID
          in: path
          description: ID of the product to delete a category from
          required: true
          schema:
            type: string
            example: '1'
        - name: categoryName
          in: path
          description: Name of the category to delete
          required: true
          schema:
            type: string
            example: shirts
      responses:
        '200':
          description: Category deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/variants:
    get:
      tags:
        - Admin Variants
      summary: Get all variants
      description: 'Retrieves detailed information about all variants. <br> Supports pagination, sorting, and filtering. <br> If `sort` is not provided, the default sort is by `createdAt` in descending order. <br> If you want to filter variant by 1 attribute, you can use the [Admin Attributes](#/Admin%20Attributes/get_admin_attributes__attributeID__variants) endpoint. <br> If you want to filter variant by 1 attribute values, you can use the [Admin Attributes](#/Admin%20Attributes/get_admin_attributes__attributeID__values__valueID__variants) endpoint. <br>'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
            example: 1
        - name: size
          in: query
          description: Size per page
          required: false
          schema:
            type: integer
            example: 10
        - name: productID
          in: query
          description: 'Filter by productID. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            example: productID
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2024-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[lte]2024-01-01'
        - name: deletedAt
          in: query
          description: 'Filter by deletedAt. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[lte]2024-01-01'
        - name: price
          in: query
          description: 'Filter by price. <br> For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[lte]1000'
        - name: discountPrice
          in: query
          description: 'Filter by discountPrice. <br> For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[lte]1000'
        - name: sku
          in: query
          description: 'Filter by sku. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            example: '[like]SKU'
        - name: stock
          in: query
          description: 'Filter by stock. <br> For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[lte]1000'
        - name: attributes
          in: query
          description: 'Filter variants by attributes. <br> For more information, see the [Filter By Variant Attributes](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md##get-products-and-get-adminproducts-1).'
          required: false
          style: deepObject
          schema:
            type: object
            description: Dynamic attributes of the product
            properties:
              color:
                example: red
              size:
                example: 'M,L'
        - name: sort
          in: query
          description: |
            Sort variants by one or more fields. <br>
            Support fields: `variantID`, `productID`, `name`, `price`, `discountPrice`, `stock`, `createdAt`, `updatedAt`, `deletedAt`. <br>
            For more information, see the [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting).
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
      responses:
        '200':
          description: Variants found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  variants:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/variant'
                        - $ref: '#/components/schemas/timestamps'
                        - $ref: '#/components/schemas/variantAttribute'
                        - $ref: '#/paths/~1admin~1orders~1%7BorderID%7D/get/responses/200/content/application~1json/schema/properties/order/allOf/2'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/variants/{variantID}':
    get:
      tags:
        - Admin Variants
      summary: Get a variant
      description: Retrieves detailed information about a specific variant.
      security:
        - bearerAuth: []
      parameters:
        - name: variantID
          in: path
          description: ID of the variant to get
          required: true
          schema:
            type: string
            example: '101'
      responses:
        '200':
          description: Variant found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: true
                  variant:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/variant'
                      - $ref: '#/components/schemas/timestamps'
                      - $ref: '#/components/schemas/variantAttribute'
                      - $ref: '#/paths/~1admin~1orders~1%7BorderID%7D/get/responses/200/content/application~1json/schema/properties/order/allOf/2'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Variants
      summary: Update a variant
      description: Updates given fields of a variant with given data. Cannot update deleted variants.
      security:
        - bearerAuth: []
      parameters:
        - name: variantID
          in: path
          description: ID of the variant to update
          required: true
          schema:
            type: string
            example: '101'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Red T-Shirt
                  nullable: true
                price:
                  type: number
                  example: 100
                  nullable: true
                discountPrice:
                  type: number
                  example: 90
                  nullable: true
                stock:
                  type: integer
                  example: 10
                  nullable: true
                sku:
                  type: string
                  nullable: true
                imageID:
                  type: string
                  example: '101'
                  nullable: true
      responses:
        '200':
          description: Variant updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variant:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/variant'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    put:
      tags:
        - Admin Variants
      summary: Replace a variant
      description: 'Replace a variant by a new variant with given data. <br> If name is not provided, it will use the product name. <br> All variant attributes will be replaced (or removed if not provided). <br> Cannot replace deleted variants.'
      security:
        - bearerAuth: []
      parameters:
        - name: variantID
          in: path
          description: ID of the variant to update
          required: true
          schema:
            type: string
            example: '101'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Red T-Shirt
                  nullable: true
                price:
                  type: number
                  example: 100
                discountPrice:
                  type: number
                  example: 90
                  nullable: true
                stock:
                  type: integer
                  example: 10
                sku:
                  type: string
                imageID:
                  type: string
                  example: '101'
                  nullable: true
                attributes:
                  type: object
                  description: Dynamic attributes of the product
                  example:
                    color: red
                    size: M
      responses:
        '200':
          description: Variant updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variant:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/variant'
                      - $ref: '#/components/schemas/timestamps'
                      - $ref: '#/components/schemas/variantAttribute'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Variants
      summary: Delete a variant
      description: Soft deletes a variant with the given ID.
      security:
        - bearerAuth: []
      parameters:
        - name: variantID
          in: path
          description: ID of the variant to delete
          required: true
          schema:
            type: string
            example: '102'
      responses:
        '200':
          description: Variant deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: true
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/categories:
    get:
      tags:
        - Admin Categories
      summary: Get all categories
      description: |
        Get all categories. <br>
        Support pagination by page and size. <br>
        Support partial matching filtering by name, parentID, parentName. <br>
        If `sort` is not provided, the default sort is by `createdAt` in descending order. <br>
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: name
          in: query
          description: 'Filter by name. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            example: '[like]Category'
        - name: parentID
          in: query
          description: 'Filter by parentID. For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            example: '1'
        - name: parentName
          in: query
          description: 'Filter by parentName. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            example: '[like]Parent'
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2024-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          schema:
            example: '[gte]2024-01-01'
        - name: sort
          in: query
          description: |
            Sort categories by one or more fields. <br>
            Supported fields: `categoryID`, `name`, `parentID`, `createdAt`, `updatedAt`. <br>
            For more information, see the [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting).
          required: false
          schema:
            oneOf:
              - type: string
              - type: array
      responses:
        '200':
          description: Categories found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/category'
                        - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Categories
      summary: Create a category
      description: |
        Create a category by name. The name must be unique.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Category
                description:
                  type: string
                  example: Category description
                  nullable: true
                parent:
                  type: string
                  description: The name or id of the parent category (both are accepted)
                  example: Parent category
                  nullable: true
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  category:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/category'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Parent category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Category already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/categories/{categoryName}':
    get:
      tags:
        - Admin Categories
      summary: Get a category
      description: |
        Get a category by name.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  category:
                    type: object
                    properties:
                      parent:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/category'
                          - $ref: '#/components/schemas/timestamps'
                    allOf:
                      - $ref: '#/components/schemas/category'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    put:
      tags:
        - Admin Categories
      summary: Update a category
      description: |
        Update a category by name. The updated name must be unique.
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Category
                description:
                  type: string
                  example: Category description
                  nullable: true
                parent:
                  type: string
                  description: The name or id of the parent category (both are accepted)
                  example: Parent category
                  nullable: true
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  category:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/category'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Category already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Categories
      summary: Delete category
      description: 'Deletes a category by name. <br> If the category is a parent category, a conflict error will be returned. <br> All associations between products and the deleted category will be removed.'
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          description: The name of the category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Category deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/coupons:
    get:
      tags:
        - Admin Coupons
      summary: Retrieve coupons
      description: 'Retrieves a list of coupons with optional filtering, sorting, and pagination. The `product` and `category` filters support an OR logic, meaning coupons matching either criteria will be included in the results. If `sort` is not provided, the default sort is by `createdAt` in descending order. <br>'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: code
          in: query
          description: 'Filter by code. <br> - For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            type: string
            example: '[like]10OFF'
        - name: discountValue
          in: query
          description: 'Filter by discountValue. <br> - For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[gte]100'
        - name: discountType
          in: query
          description: Filter by discountType.
          required: false
          schema:
            type: string
            enum:
              - percentage
              - fixed
            example: percentage
        - name: target
          in: query
          description: Filter by target.
          required: false
          schema:
            type: string
            enum:
              - single
              - all
            example: all
        - name: minimumOrderAmount
          in: query
          description: 'Filter by minimumOrderAmount. <br> - For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[gte]100'
        - name: timesUsed
          in: query
          description: 'Filter by timesUsed. <br> - For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[gte]100'
        - name: maxUsage
          in: query
          description: 'Filter by maxUsage. <br> - For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[gte]100'
        - name: startDate
          in: query
          description: 'Filter by startDate. <br> - For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[lte]2024-01-01'
        - name: endDate
          in: query
          description: 'Filter by endDate. <br> - For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          schema:
            example: '[gte]2024-01-01'
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> - For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          schema:
            example: '[lte]2024-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> - For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            type: string
        - name: product
          in: query
          style: deepObject
          description: 'Filter by product''s productID, name, createdAt, updatedAt. <br>'
          required: false
          schema:
            type: object
            properties:
              productID:
                description: |
                  For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering)
                example: '1'
              name:
                description: |
                  For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering)
                example: '[like]name'
              createdAt:
                description: |
                  For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering)
                example: '[lte]2024-01-01'
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            $ref: '#/components/schemas/categoryNames'
        - name: sort
          in: query
          description: |
            Sort by fields. <br>
            Support fields: `couponID`, `code`, `discountValue`, `discountType`, `target`, `minimumOrderAmount`, `timesUsed`, `maxUsage`, `startDate`, `endDate`, `createdAt`, `updatedAt`. <br>
            For more information, see the [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting).
          required: false
          schema:
            type: string
            example: 'code,-discountValue'
      responses:
        '200':
          description: Coupons retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupons:
                    type: array
                    items:
                      type: object
                      properties:
                        products:
                          type: array
                          items:
                            type: object
                            properties:
                              productID:
                                type: string
                                example: '1'
                              name:
                                type: string
                                example: Product 1
                        categories:
                          $ref: '#/components/schemas/categoryNames'
                      allOf:
                        - $ref: '#/components/schemas/coupon'
                        - $ref: '#/components/schemas/timestamps'
                allOf:
                  - $ref: '#/components/schemas/pagination'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Coupons
      summary: Create a coupon
      description: |
        Creates a new coupon with the provided data. <br>
        The coupon code must be unique. <br>
        The `maxUsage` field controls the coupon's usage limit: 0 disables the coupon, and null indicates unlimited usage.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: 10OFF
                description:
                  type: string
                  example: 10% off
                discountValue:
                  type: number
                  example: 10
                discountType:
                  type: string
                  enum:
                    - percentage
                    - fixed
                  example: percentage
                minimumOrderAmount:
                  type: number
                  example: 100
                maxUsage:
                  type: number
                  example: 100
                  nullable: true
                target:
                  type: string
                  enum:
                    - single
                    - all
                  example: all
                endDate:
                  type: string
                  format: date-time
                  example: '2022-01-01T00:00:00Z'
                  nullable: true
                productIDs:
                  type: array
                  description: Product IDs that the coupon applies to
                  items:
                    type: string
                  example:
                    - '1'
                    - '2'
                  nullable: true
                categories:
                  type: array
                  description: Category names that the coupon applies to
                  items:
                    type: string
                  example:
                    - '1'
                    - '2'
                  nullable: true
      responses:
        '201':
          description: Coupon created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productID:
                              type: string
                              example: '1'
                            name:
                              type: string
                              example: Product 1
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '409':
          description: Coupon code already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/coupons/{couponID}':
    get:
      tags:
        - Admin Coupons
      summary: Get a coupon by couponID
      description: Retrieve a coupon by couponID.
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Coupon found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productID:
                              type: string
                              example: '1'
                            name:
                              type: string
                              example: Product 1
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Coupon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Coupons
      summary: Update coupon details
      description: 'Updates specific fields of an existing coupon identified by its coupon ID. Only `description`, `minimumOrderAmount`, `maxUsage`, and `endDate` can be modified to maintain financial integrity.'
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: 10% off
                minimumOrderAmount:
                  type: number
                  example: 100
                maxUsage:
                  type: number
                  example: 100
                  nullable: true
                endDate:
                  type: string
                  format: date-time
                  example: '2022-01-01T00:00:00Z'
      responses:
        '200':
          description: Coupon updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Coupon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Coupons
      summary: Disable coupon
      description: 'Soft deletes a coupon by its ID. <br> The coupon''s `maxUsage` is set to 0, effectively disabling it. <br> Can reactivate the coupon by updating the `maxUsage` to a positive number.'
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Coupon deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Coupon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/coupons/{couponID}/categories':
    post:
      tags:
        - Admin Coupons
      summary: Add categories to a coupon
      description: Add categories to a coupon by couponID (by categories' name).
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  $ref: '#/components/schemas/categoryNames'
      responses:
        '201':
          description: Categories added to coupon
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    properties:
                      categories:
                        $ref: '#/components/schemas/categoryNames'
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/coupons/{couponID}/categories/{categoryName}':
    delete:
      tags:
        - Admin Coupons
      summary: Delete a category from a coupon
      description: Delete a category from a coupon by couponID.
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
        - name: categoryName
          in: path
          description: Category Name
          required: true
          schema:
            type: string
            example: tops
      responses:
        '200':
          description: Category deleted from coupon
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Category not found in coupon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/coupons/{couponID}/products':
    post:
      tags:
        - Admin Coupons
      summary: Add products to a coupon by couponID
      description: Add products to a coupon by couponID.
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productIDs:
                  type: array
                  items:
                    type: string
                  example:
                    - '1'
                    - '2'
      responses:
        '201':
          description: Products added to coupon
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  coupon:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            productID:
                              type: string
                              example: '1'
                            name:
                              type: string
                              example: Product 1
                    allOf:
                      - $ref: '#/components/schemas/coupon'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Coupon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/coupons/{couponID}/products/{productID}':
    delete:
      tags:
        - Admin Coupons
      summary: Delete a product from a coupon
      description: Delete a product from a coupon by couponID.
      security:
        - bearerAuth: []
      parameters:
        - name: couponID
          in: path
          description: Coupon ID
          required: true
          schema:
            type: string
            example: '1'
        - name: productID
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Product deleted from coupon
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Category not found in coupon
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/attributes:
    get:
      tags:
        - Admin Attributes
      summary: Retrieve attributes
      description: 'Retrieves a list of available attributes, including their values. <br> Supports pagination, filtering, and sorting. <br> If `sort` is not provided, the default sort is by `attributeID` in ascending order. <br>'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: attributeID
          in: query
          description: 'Filter by attributeID. <br> For more information, see [Number Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[gte]1'
        - name: name
          in: query
          description: 'Filter by name. <br> For more information, see [String Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            example: '[like]color'
        - name: values
          in: query
          description: 'Filter by values. <br> For more information, see [String Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#string-filtering).'
          required: false
          schema:
            example: '[like]red,[like]M'
        - name: createdAt
          in: query
          description: 'Filter by createdAt. <br> For more information, see [Date Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2022-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt. <br> For more information, see [Date Query](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2022-01-01'
        - name: sort
          in: query
          description: |
            Sort by multiple fields. <br>
            Support fields: `attributeID`, `name`, `createdAt`, `updatedAt`. <br>
            For more information, see [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting)
          required: false
          schema:
            example: 'attributeID,-createdAt'
      responses:
        '200':
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        values:
                          type: array
                          items:
                            type: string
                          example:
                            - red
                            - blue
                      allOf:
                        - $ref: '#/components/schemas/attribute'
                        - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    post:
      tags:
        - Admin Attributes
      summary: Create an attribute
      description: |
        Create a new attribute with values. 
        The attribute name must be unique. 
        The values must be unique within the attribute. 
        The values can be empty.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: color
                values:
                  type: array
                  items:
                    type: string
                  example:
                    - red
                    - blue
      responses:
        '201':
          description: Attribute created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  attribute:
                    type: object
                    properties:
                      values:
                        type: array
                        items:
                          type: string
                        example:
                          - red
                          - blue
                    allOf:
                      - $ref: '#/components/schemas/attribute'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '409':
          description: Attribute name already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/attributes/{attributeID}':
    get:
      tags:
        - Admin Attributes
      summary: Retrieve attribute details
      description: Retrieves detailed information about a specific attribute based on its ID.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Attributes retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  attribute:
                    type: object
                    properties:
                      attributeID:
                        type: string
                        example: '1'
                      name:
                        type: string
                        example: color
                      values:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/value'
                            - $ref: '#/components/schemas/timestamps'
                    allOf:
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Attributes
      summary: Rename an attribute
      description: |
        Rename an attribute by ID.
        The attribute name must be unique. 
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: color
      responses:
        '200':
          description: Attribute updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  attribute:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/attribute'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    put:
      tags:
        - Admin Attributes
      summary: Replace attribute details
      description: 'Replaces all details of an existing attribute. <br> The attribute name must be unique. <br> Values must be unique within the attribute and can be empty. <br> Any products associated with the attribute will have it removed. <br> To modify only the attribute name, use the PATCH method.'
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: color
                values:
                  type: array
                  items:
                    type: string
                  example:
                    - red
                    - blue
      responses:
        '200':
          description: Attribute updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  attribute:
                    type: object
                    properties:
                      values:
                        type: array
                        items:
                          type: object
                          allOf:
                            - $ref: '#/components/schemas/value'
                            - $ref: '#/components/schemas/timestamps'
                    allOf:
                      - $ref: '#/components/schemas/attribute'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Attributes
      summary: Delete attribute
      description: Deletes an attribute and its associated values. Any product variants using this attribute will have the attribute removed.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Attribute deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Attribute in Use
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/attributes/{attributeID}/variants':
    get:
      tags:
        - Admin Attributes
      summary: Get variants which have the attribute
      description: |
        Get variants which have the attributeID. <br>
        Support pagination, sorting and filtering. <br>
        If `sort` is not provided, the default sort is by `createdAt` in descending order. <br>
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: price
          in: query
          description: 'Filter by variants'' price. For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[gte]100'
        - name: stock
          in: query
          description: 'Filter by variants'' stock. <br> For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[lte]100'
        - name: createdAt
          in: query
          description: 'Filter by variants'' created time. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2022-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by variants'' updated time. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2022-01-01'
        - name: deletedAt
          in: query
          description: 'Filter by variants'' deleted time. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2022-01-01'
        - name: sort
          in: query
          description: |
            Sort by variants' fields. <br>
            Support fields:`variantID`, `productID`, `price`, `stock`, `createdAt`, `updatedAt`. <br>
            For more information, see the [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting).
          required: false
          schema:
            example: 'price,-createdAt'
      responses:
        '200':
          description: Variants found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variants:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/variant'
                        - $ref: '#/components/schemas/timestamps'
                        - $ref: '#/components/schemas/variantAttribute'
                allOf:
                  - $ref: '#/components/schemas/pagination'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/attributesValues:
    get:
      tags:
        - Admin Attribute Values
      summary: Get attribute values
      description: 'Retrieves a list of all attribute values. <br> Support pagination, sorting and filtering. <br> If `sort` is not provided, the default sort is by `createdAt` in descending order.'
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: valueID
          in: query
          description: 'Filter by valueID. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#query-string).'
          required: false
          schema:
            example: '[like]1'
        - name: value
          in: query
          description: 'Filter by value. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#query-string).'
          required: false
          schema:
            example: '[like]value'
        - name: attributeID
          in: query
          description: 'Filter by attributeID. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#query-string).'
          required: false
          schema:
            example: '[like]1'
        - name: attributeName
          in: query
          description: 'Filter by attribute name. <br> For more information, see the [Query String](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#query-string).'
          required: false
          schema:
            example: '[like]attribute'
        - name: createdAt
          in: query
          description: 'Filter by created time. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2024-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by updated time. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2024-01-01'
        - name: sort
          in: query
          required: false
          description: |
            Sort by attribute values' fields. <br> 
            Support fields: `valueID`, `attributeID`, `value`, `createdAt`, `updatedAt`. <br>
            For more information, see the [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting).
          schema:
            example: 'value,-attributeID'
      responses:
        '200':
          description: Attribute values found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  values:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/value'
                        - $ref: '#/components/schemas/timestamps'
                allOf:
                  - $ref: '#/components/schemas/pagination'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/attributes/{attributeID}/values':
    post:
      tags:
        - Admin Attribute Values
      summary: Add values to an attribute
      description: |
        Add values to an attribute. 
        The values must be unique within the attribute. 
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                values:
                  type: array
                  items:
                    type: string
                  example:
                    - red
                    - blue
      responses:
        '200':
          description: Values added to attribute
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  values:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/value'
                        - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Attribute value already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/attributes/{attributeID}/values/{valueID}':
    get:
      tags:
        - Admin Attribute Values
      summary: Get attribute value
      description: Retrieves an attribute value by ID.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
        - name: valueID
          in: path
          description: Value ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Attribute value retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  value:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/value'
                      - $ref: '#/components/schemas/timestamps'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Value Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    patch:
      tags:
        - Admin Attribute Values
      summary: Update attribute value
      description: |
        Updates the name of an attribute value. <br>
        The value must be unique within the attribute. <br>
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
        - name: valueID
          in: path
          description: Value ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  example: red
      responses:
        '200':
          description: Value updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  value:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/value'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute or value not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Value already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    put:
      tags:
        - Admin Attribute Values
      summary: Replace an attribute value
      description: |
        Replace an attribute value by the new value. <br>
        The value must be unique within the attribute. <br>
        Any products associated with the value will have it removed. <br>
        To modify only the value, use the PATCH method.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
        - name: valueID
          in: path
          description: Value ID
          required: true
          schema:
            type: string
            example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  example: red
      responses:
        '200':
          description: Value updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  value:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/value'
                      - $ref: '#/components/schemas/timestamps'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute or value not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Value already exists
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Attribute Values
      summary: Delete attribute value
      description: Deletes a specific attribute value. This action will remove the value from the attribute and any associated product variants.
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
        - name: valueID
          in: path
          description: Value ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Attribute value deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Value Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '409':
          description: Attribute Value in Use
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1signup/post/responses/409/content/application~1json/schema'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/attributes/{attributeID}/values/{valueID}/variants':
    get:
      tags:
        - Admin Attribute Values
      summary: Get variants which have the attribute value
      description: |
        Get variants which have the valueID. <br>
        Support pagination, sorting and filtering. <br>
        If `sort` is not provided, the default sort is by `createdAt` in descending order. <br>
        If you want to filter variants by multiple attribute values, you can use the [Admin Variants](#/Admin%20Variants/get_admin_variants) endpoint. <br>
      security:
        - bearerAuth: []
      parameters:
        - name: attributeID
          in: path
          description: Attribute ID
          required: true
          schema:
            type: string
            example: '1'
        - name: valueID
          in: path
          description: Value ID
          required: true
          schema:
            type: string
            example: '1'
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: price
          in: query
          description: 'Filter by variants'' price. For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[gte]100'
        - name: stock
          in: query
          description: 'Filter by variants'' stock. <br> For more information, see the [Query Number](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#number-filtering).'
          required: false
          schema:
            example: '[lte]100'
        - name: createdAt
          in: query
          description: 'Filter by variants'' created time. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2022-01-01'
        - name: updatedAt
          in: query
          description: 'Filter by variants'' updated time. <br> For more information, see the [Query Date](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#date-filtering).'
          required: false
          schema:
            example: '[gte]2022-01-01'
        - name: sort
          in: query
          description: |
            Sort by variants' fields. <br>
            Support fields:`variantID`, `productID`, `price`, `stock`, `createdAt`, `updatedAt`. <br>
            For more information, see the [Sorting](http://github.com/Tondeptrai23/e-commerce-api/blob/main/src/v2/document/docs/query.md#sorting).
          required: false
          schema:
            example: 'price,-createdAt'
      responses:
        '200':
          description: Variants found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  variants:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/variant'
                        - $ref: '#/components/schemas/timestamps'
                        - $ref: '#/components/schemas/variantAttribute'
                allOf:
                  - $ref: '#/components/schemas/pagination'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Attribute Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/users:
    get:
      tags:
        - Admin Users
      summary: Get all users
      description: |
        Get all users.
        Support filtering, sorting, and pagination. <br>
        If `sort` is not provided, the default sort is by `createdAt` in descending order. <br>
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
            example: 1
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
            example: 10
        - name: email
          in: query
          description: Filter by email
          required: false
          schema:
            type: string
            example: '[like]gmail.com'
        - name: name
          in: query
          description: Filter by name
          required: false
          schema:
            type: string
            example: '[like]John'
        - name: role
          in: query
          description: Filter by role
          required: false
          schema:
            type: string
            enum:
              - user
              - admin
            example: user
        - name: createdAt
          in: query
          description: Filter by createdAt
          required: false
          schema:
            type: string
            example: '[between]2021-01-01,2021-12-31'
        - name: updatedAt
          in: query
          description: Filter by updatedAt
          required: false
          schema:
            type: string
            example: '[between]2021-01-01,2021-12-31'
        - name: deletedAt
          in: query
          description: Filter by deletedAt
          required: false
          schema:
            type: string
            example: '[between]2021-01-01,2021-12-31'
        - name: sort
          in: query
          description: Sort by field
          required: false
          schema:
            type: string
            example: '-createdAt,name'
      responses:
        '200':
          description: Get all users successful
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/pagination'
                properties:
                  success:
                    type: boolean
                    example: true
                  users:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/user'
                        - $ref: '#/components/schemas/timestamps'
                        - $ref: '#/paths/~1admin~1orders~1%7BorderID%7D/get/responses/200/content/application~1json/schema/properties/order/allOf/2'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/users/{userID}':
    get:
      tags:
        - Admin Users
      summary: Get user by ID
      description: 'Get user by ID, association with its addresses'
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          description: User ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Get user by ID successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/user'
                      - $ref: '#/components/schemas/timestamps'
                    properties:
                      addresses:
                        type: array
                        items:
                          $ref: '#/components/schemas/address'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
    delete:
      tags:
        - Admin Users
      summary: Soft delete user
      description: Soft deletes a user by their ID. <br> The user will be unable to log in. <br> Associated cart items and pending order will be deleted. <br> Checked-out orders and addresses remain unaffected.
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          description: User ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Delete user by ID successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/users/{userID}/cart':
    get:
      tags:
        - Admin Users
      summary: Get user's cart
      description: |
        Get user's cart
      security:
        - bearerAuth: []
      parameters:
        - name: userID
          in: path
          description: User ID
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Get user's cart successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  /admin/orders:
    get:
      tags:
        - Admin Orders
      summary: Get all orders
      description: |
        Get all orders.
        Support pagination, filtering, sorting. <br>
        If `sort` is not provided, the default sort is by `createdAt` in descending order. <br>
      parameters:
        - name: page
          in: query
          description: Page to retrieve
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size each page
          required: false
          schema:
            type: integer
        - name: sort
          in: query
          description: Sort orders by one or more fields.
          required: false
          schema:
            example: 'finalTotal,-createdAt'
            oneOf:
              - type: string
              - type: array
        - name: subTotal
          in: query
          description: 'Filter by subTotal <br> Support operators "[lte]", "[gte]", "[between]"'
          required: false
          schema:
            type: string
            example: '[lte]100'
        - name: finalTotal
          in: query
          description: 'Filter by finalTotal <br> Support operators "[lte]", "[gte]", "[between]"'
          required: false
          schema:
            type: string
            example: '[gte]100'
        - name: status
          in: query
          description: Filter by status
          required: false
          schema:
            type: string
            enum:
              - pending
              - processing
              - shipping
              - delivered
            example: pending
        - name: paymentMethod
          in: query
          description: Filter by paymentMethod
          required: false
          schema:
            type: string
            enum:
              - cod
              - momo
              - credit card
            example: cod
        - name: createdAt
          in: query
          description: 'Filter by createdAt Support operators "[lte]", "[gte]", "[between]"'
          required: false
          schema:
            type: string
            example: '[lte]2021-01-01T00:00:00.000Z'
        - name: updatedAt
          in: query
          description: 'Filter by updatedAt <br> Support operators "[lte]", "[gte]", "[between]"'
          required: false
          schema:
            type: string
            example: '[lte]2021-01-01T00:00:00.000Z'
        - name: deletedAt
          in: query
          description: 'Filter by deletedAt <br> Support operators "[lte]", "[gte]", "[between]" <br> If you want to get only deleted orders, use "[lte]" with current date'
          required: false
          schema:
            type: string
            example: '[lte]2021-01-01T00:00:00.000Z'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Orders found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  orders:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/order'
                        - $ref: '#/components/schemas/timestamps'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
        '401':
          description: 'Token invalid, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
  '/admin/orders/{orderID}':
    get:
      tags:
        - Admin Orders
      summary: Get order by orderID
      description: |
        Get an order by orderID.
      security:
        - bearerAuth: []
      parameters:
        - name: orderID
          in: path
          description: ID of the order to get
          required: true
          schema:
            type: string
            example: '1'
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  order:
                    type: object
                    allOf:
                      - $ref: '#/paths/~1cart/post/responses/200/content/application~1json/schema/properties/order'
                      - $ref: '#/components/schemas/timestamps'
                      - type: object
                        properties:
                          deletedAt:
                            type: string
                            format: date-time
                            example: '2024-01-01T00:00:00.000Z'
        '401':
          description: 'Token error, not authenticated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error401'
        '403':
          description: Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error403'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error404'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error500'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    error400:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: field
              value:
                description: The value of the field that caused the error (can be anything)
                example: {}
              message:
                type: string
                example: Something is invalid
              path:
                type: string
                example: 'array[0].field'
              location:
                type: string
                example: body
    error401:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: Token invalid
    error403:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: Not an admin. Cannot retrieve administrative data
    error404:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
                example: NotFound
              message:
                type: string
                example: Something not found
    error500:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: InternalServerError
              message:
                type: string
                example: Something went wrong
    product:
      type: object
      properties:
        productID:
          type: string
          example: '1'
        name:
          type: string
          example: T-shirt
        description:
          type: string
          nullable: true
    variant:
      type: object
      properties:
        variantID:
          type: string
          example: '101'
        name:
          type: string
          example: Red T-Shirt
          nullable: true
        price:
          type: number
          example: 100
        discountPrice:
          type: number
          example: 90
          nullable: true
        stock:
          type: integer
          example: 10
        sku:
          type: string
        productID:
          type: string
          example: '1'
        imageID:
          type: string
          example: '1'
        image:
          type: string
          example: image.com/image.jpg
          nullable: true
    variantAttribute:
      type: object
      properties:
        attributes:
          type: object
          description: Dynamic attributes of the product
          example:
            color: red
            size: M
    image:
      type: object
      properties:
        imageID:
          type: string
          example: '101'
        url:
          type: string
          example: image.com/image.jpg
        altText:
          type: string
          nullable: true
        displayOrder:
          type: integer
          example: 1
        productID:
          type: string
          example: '1'
    categoryNames:
      type: array
      example:
        - tops
        - male
      items:
        type: string
    category:
      type: object
      properties:
        categoryID:
          type: string
          example: '8'
        name:
          type: string
          example: tshirt
        description:
          type: string
          nullable: true
        parentID:
          type: string
          example: '6'
    attribute:
      type: object
      properties:
        attributeID:
          type: string
          example: '1'
        name:
          type: string
          example: color
    value:
      type: object
      properties:
        valueID:
          type: string
          example: '1'
        value:
          type: string
          example: red
        attributeID:
          type: string
          example: '1'
    coupon:
      type: object
      properties:
        couponID:
          type: string
          example: '1'
        code:
          type: string
          example: 10OFF
        description:
          type: string
          example: 10% off
        discountValue:
          type: number
          example: 10
        discountType:
          type: string
          enum:
            - percentage
            - fixed
          example: percentage
        target:
          type: string
          enum:
            - single
            - all
          example: all
        minimumOrderAmount:
          type: number
          example: 100
        timesUsed:
          type: number
          example: 1
        maxUsage:
          type: number
          example: 10
          nullable: true
        startDate:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00Z'
          nullable: true
        endDate:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00Z'
          nullable: true
    order:
      type: object
      properties:
        orderID:
          type: string
          example: '1'
        status:
          type: string
          example: pending
        message:
          type: string
          example: Message here
        subTotal:
          type: number
          example: 90
        finalTotal:
          type: number
          example: 90
        paymentMethod:
          type: string
          example: COD
        userID:
          type: string
          example: '1'
    user:
      type: object
      properties:
        userID:
          type: string
          example: '1'
        email:
          type: string
          example: example@gmail.com
        name:
          type: string
          example: John Doe
        role:
          type: string
          example: user
    address:
      type: object
      properties:
        addressID:
          type: string
          example: '1'
        userID:
          type: string
          example: '1'
        phoneNumber:
          type: string
          example: 0123456789
        recipientName:
          type: string
          example: John Doe
        address:
          type: string
          example: 123 Bui Huu Nghia
        city:
          type: string
          example: Bien Hoa City
        district:
          type: string
          example: Dong Nai
    timestamps:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00.000Z'
    pagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 20
